
Master_Atmega324PB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000177c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800100  00800100  0000177c  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000118  00000000  00000000  000017ab  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  000018c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000429f  00000000  00000000  00001a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010d8  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000175a  00000000  00000000  00006e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000530  00000000  00000000  0000855c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056d  00000000  00000000  00008a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000173e  00000000  00000000  00008ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000a737  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000167a  0000167a  0000176e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a8d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .progmemx.data 0000000f  00000182  00000182  00000276  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 16 .text.UlozDatazDispleja 000001e6  000003fe  000003fe  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000026c  00000192  00000192  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_20 00000040  00001248  00001248  0000133c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .data.last_min 00000001  0080012d  00000191  00000285  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .bss.bud3_dni 00000001  0080012e  0080012e  0000177c  2**0
                  ALLOC
 21 .bss.bud2_dni 00000001  0080012f  0080012f  0000177c  2**0
                  ALLOC
 22 .bss.bud1_dni 00000001  00800130  00800130  0000177c  2**0
                  ALLOC
 23 .bss.nastav_den_n 00000001  00800131  00800131  0000177c  2**0
                  ALLOC
 24 .bss.poc      00000002  0080012b  0080012b  0000177c  2**0
                  ALLOC
 25 .bss.P_UART_0 00000001  00800132  00800132  0000177c  2**0
                  ALLOC
 26 .text.Master_start 0000004e  0000116c  0000116c  00001260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.LD_SW_init 00000010  000015c4  000015c4  000016b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.TWI_0_Init 00000020  0000151c  0000151c  00001610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.TWI_0_Start 0000003e  00001288  00001288  0000137c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.TWI_0_Stop 00000020  0000153c  0000153c  00001630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.TWI_0_Write 00000034  00001304  00001304  000013f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.TWI_0_Read_nAck 00000024  00001490  00001490  00001584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.BCD_to_Decimal 00000016  00001598  00001598  0000168c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.Decimal_to_BCD 0000002a  000013c6  000013c6  000014ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.DS1307_Write 00000028  000013f0  000013f0  000014e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.DS1307_Read 0000002e  0000136c  0000136c  00001460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.DS1307_Set_RTC 000000b0  00000ad8  00000ad8  00000bcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.TWI_1_Init 00000022  000014d8  000014d8  000015cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.TWI_1_Start 0000003e  000012c6  000012c6  000013ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.TWI_1_Stop 00000020  0000155c  0000155c  00001650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.TWI_1_Write 00000034  00001338  00001338  0000142c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.TWI_1_Read_nAck 00000024  000014b4  000014b4  000015a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.SHT31_Init 00000006  0000166e  0000166e  00001762  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.SHT31_ReadTemperature 00000078  00000de2  00000de2  00000ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.SHT31_ReadHumidity 0000006c  00000e5a  00000e5a  00000f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.USART_0_Init 00000028  00001418  00001418  0000150c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.USART_0_Transmit_char 0000000e  000015e4  000015e4  000016d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.USART_0_Transmit_string 0000002c  0000139a  0000139a  0000148e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.USART_0_Transmit_number 000000a6  00000b88  00000b88  00000c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.USART_0_Flush 00000010  000015d4  000015d4  000016c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .progmemx.data 00000032  00000150  00000150  00000244  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 52 .text.RTC_Master 00000160  000005e4  000005e4  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.TempRH_Master 00000094  00000cd4  00000cd4  00000dc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.TempWind_Outdoor 0000004a  000011ba  000011ba  000012ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.USART_1_Init 0000001c  0000157c  0000157c  00001670  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.USART_1_Transmit_char 0000000e  000015f2  000015f2  000016e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.USART_1_Transmit_number 000000a6  00000c2e  00000c2e  00000d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.ActualDataforSlave 00000060  00000f9e  00000f9e  00001092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.Master_A1 0000006c  00000ec6  00000ec6  00000fba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.Master_A3 00000060  00000ffe  00000ffe  000010f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.Master_A5 0000006c  00000f32  00000f32  00001026  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.Master_Alarm 00000114  00000744  00000744  00000838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.Master_A7 00000060  0000105e  0000105e  00001152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.Master_A8 00000050  0000111c  0000111c  00001210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text         0000000e  00001600  00001600  000016f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text         000000ce  00000a0a  00000a0a  00000afe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text         00000008  0000165e  0000165e  00001752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text         000000de  00000858  00000858  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text         0000000e  0000160e  0000160e  00001702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text         0000005e  000010be  000010be  000011b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text         0000007a  00000d68  00000d68  00000e5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text         0000000c  00001646  00001646  0000173a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text         00000006  00001674  00001674  00001768  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text         0000000e  0000161c  0000161c  00001710  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text         0000000e  0000162a  0000162a  0000171e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text         00000022  000014fa  000014fa  000015ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text         00000044  00001204  00001204  000012f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text         0000000e  00001638  00001638  0000172c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text         00000008  00001666  00001666  0000175a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text         000000d4  00000936  00000936  00000a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.libgcc.div 00000028  00001440  00001440  00001534  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.libgcc  0000000c  00001652  00001652  00001746  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.libgcc.div 00000028  00001468  00001468  0000155c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__dummy_fini 00000002  00001682  00001682  00001776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__dummy_funcs_on_exit 00000002  00001684  00001684  00001778  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__dummy_simulator_exit 00000002  00001686  00001686  0000177a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.exit    00000016  000015ae  000015ae  000016a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text._Exit   00000004  0000167e  0000167e  00001772  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__ctors_end>
   4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
   8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
   c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  10:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  14:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  18:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  1c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  20:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  24:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  28:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  2c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  30:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  34:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  38:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  3c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  40:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  44:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  48:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  4c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  50:	0c 94 24 09 	jmp	0x1248	; 0x1248 <__vector_20>
  54:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  58:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  5c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  60:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  64:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  68:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  6c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  70:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  74:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  78:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  7c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  80:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  84:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  88:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  8c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  90:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  94:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  98:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  9c:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  a0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  a4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  a8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  ac:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  b0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  b4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  b8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  bc:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  c0:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  c4:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  c8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__bad_interrupt>
  cc:	1a 02       	muls	r17, r26
  ce:	e3 02       	muls	r30, r19
  d0:	2e 02       	muls	r18, r30
  d2:	e3 02       	muls	r30, r19
  d4:	3d 02       	muls	r19, r29
  d6:	e3 02       	muls	r30, r19
  d8:	51 02       	muls	r21, r17
  da:	60 02       	muls	r22, r16
  dc:	69 02       	muls	r22, r25
  de:	e3 02       	muls	r30, r19
  e0:	9c 02       	muls	r25, r28
  e2:	e3 02       	muls	r30, r19
  e4:	b4 02       	muls	r27, r20
  e6:	e3 02       	muls	r30, r19
  e8:	cc 02       	muls	r28, r28

000000ea <.dinit>:
  ea:	01 00       	.word	0x0001	; ????
  ec:	01 2d       	mov	r16, r1
  ee:	80 01       	movw	r16, r0
  f0:	2d 01       	movw	r4, r26
  f2:	2e 00       	.word	0x002e	; ????
  f4:	01 91       	ld	r16, Z+
  f6:	01 2e       	mov	r0, r17
  f8:	01 33       	cpi	r16, 0x31	; 49
  fa:	80 00       	.word	0x0080	; ????

000000fc <__ctors_end>:
  fc:	11 24       	eor	r1, r1
  fe:	1f be       	out	0x3f, r1	; 63
 100:	cf ef       	ldi	r28, 0xFF	; 255
 102:	d8 e0       	ldi	r29, 0x08	; 8
 104:	de bf       	out	0x3e, r29	; 62
 106:	cd bf       	out	0x3d, r28	; 61

00000108 <__do_copy_data>:
 108:	ea ee       	ldi	r30, 0xEA	; 234
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	17 c0       	rjmp	.+46     	; 0x13e <__do_clear_bss+0x8>
 110:	b5 91       	lpm	r27, Z+
 112:	a5 91       	lpm	r26, Z+
 114:	35 91       	lpm	r19, Z+
 116:	25 91       	lpm	r18, Z+
 118:	05 91       	lpm	r16, Z+
 11a:	07 fd       	sbrc	r16, 7
 11c:	0c c0       	rjmp	.+24     	; 0x136 <__do_clear_bss>
 11e:	95 91       	lpm	r25, Z+
 120:	85 91       	lpm	r24, Z+
 122:	ef 01       	movw	r28, r30
 124:	f9 2f       	mov	r31, r25
 126:	e8 2f       	mov	r30, r24
 128:	05 90       	lpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	a2 17       	cp	r26, r18
 12e:	b3 07       	cpc	r27, r19
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x20>
 132:	fe 01       	movw	r30, r28
 134:	04 c0       	rjmp	.+8      	; 0x13e <__do_clear_bss+0x8>

00000136 <__do_clear_bss>:
 136:	1d 92       	st	X+, r1
 138:	a2 17       	cp	r26, r18
 13a:	b3 07       	cpc	r27, r19
 13c:	e1 f7       	brne	.-8      	; 0x136 <__do_clear_bss>
 13e:	eb 3f       	cpi	r30, 0xFB	; 251
 140:	f4 07       	cpc	r31, r20
 142:	31 f7       	brne	.-52     	; 0x110 <__do_copy_data+0x8>
 144:	0e 94 c9 00 	call	0x192	; 0x192 <main>
 148:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <exit>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>

Disassembly of section .text:

0000167a <__bad_interrupt>:
    167a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.UlozDatazDispleja:

000003fe <UlozDatazDispleja>:
	
	return 0;
}	// Koniec "main".

void UlozDatazDispleja (void)
{
 3fe:	ef 92       	push	r14
 400:	0f 93       	push	r16
	if(LED1)LED1_ON;
 402:	4d 9b       	sbis	0x09, 5	; 9
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 406:	8b b1       	in	r24, 0x0b	; 11
 408:	8f 7d       	andi	r24, 0xDF	; 223
 40a:	8b b9       	out	0x0b, r24	; 11
	if(!LED0)LED0_OFF;
 40c:	4c 99       	sbic	0x09, 4	; 9
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 410:	8b b1       	in	r24, 0x0b	; 11
 412:	80 61       	ori	r24, 0x10	; 16
 414:	8b b9       	out	0x0b, r24	; 11
	
	switch (UART_0_DATA[0])
 416:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <UART_0_DATA>
 41a:	8e 2f       	mov	r24, r30
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	e1 5a       	subi	r30, 0xA1	; 161
 422:	f1 09       	sbc	r31, r1
 424:	ef 30       	cpi	r30, 0x0F	; 15
 426:	f1 05       	cpc	r31, r1
 428:	08 f0       	brcs	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42a:	cd c0       	rjmp	.+410    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
 42c:	ea 59       	subi	r30, 0x9A	; 154
 42e:	ff 4f       	sbci	r31, 0xFF	; 255
 430:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__tablejump2__>
	{
		// Priame zadanie nastavenia zaluzii:
		case 0xA1:
			zadanie_zal_ID		= UART_0_DATA[1];
 434:	e1 e0       	ldi	r30, 0x01	; 1
 436:	f1 e0       	ldi	r31, 0x01	; 1
 438:	81 81       	ldd	r24, Z+1	; 0x01
 43a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <zadanie_zal_ID>
			zadanie_pozicia		= UART_0_DATA[2];
 43e:	82 81       	ldd	r24, Z+2	; 0x02
 440:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <zadanie_pozicia>
			zadanie_natocenie	= UART_0_DATA[3];
 444:	83 81       	ldd	r24, Z+3	; 0x03
 446:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <zadanie_natocenie>
			Master_A1(zadanie_zal_ID, zadanie_pozicia, zadanie_natocenie);
 44a:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <zadanie_natocenie>
 44e:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <zadanie_pozicia>
 452:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <zadanie_zal_ID>
 456:	0e 94 63 07 	call	0xec6	; 0xec6 <Master_A1>
			break;
 45a:	b5 c0       	rjmp	.+362    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Priradenie maximalnej pozicie zaluzie:
		case 0xA3:
			max_zal_ID		= UART_0_DATA[1];
 45c:	e1 e0       	ldi	r30, 0x01	; 1
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	81 81       	ldd	r24, Z+1	; 0x01
 462:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <max_zal_ID>
			max_pozicia		= UART_0_DATA[2];
 466:	82 81       	ldd	r24, Z+2	; 0x02
 468:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <max_pozicia>
			Master_A3(max_zal_ID, max_pozicia);
 46c:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <max_pozicia>
 470:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <max_zal_ID>
 474:	0e 94 ff 07 	call	0xffe	; 0xffe <Master_A3>
			break;
 478:	a6 c0       	rjmp	.+332    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Priradenie doby zaluzie - master doby a lokalnej doby:
		case 0xA5:
			doby_zal_ID		= UART_0_DATA[1];
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	81 81       	ldd	r24, Z+1	; 0x01
 480:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <doby_zal_ID>
			doby_min_L		= UART_0_DATA[2];
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <doby_min_L>
			doby_min_M		= UART_0_DATA[3];
 48a:	83 81       	ldd	r24, Z+3	; 0x03
 48c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <doby_min_M>
			Master_A5(doby_zal_ID, doby_min_L, doby_min_M);
 490:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <doby_min_M>
 494:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <doby_min_L>
 498:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <doby_zal_ID>
 49c:	0e 94 99 07 	call	0xf32	; 0xf32 <Master_A5>
			break;
 4a0:	92 c0       	rjmp	.+292    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Umyvanie zaluzii:
		case 0xA7:
			umyva_zal_ID	= UART_0_DATA[1];
 4a2:	e1 e0       	ldi	r30, 0x01	; 1
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	81 81       	ldd	r24, Z+1	; 0x01
 4a8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <umyva_zal_ID>
			umyva_ON_OFF	= UART_0_DATA[2];
 4ac:	82 81       	ldd	r24, Z+2	; 0x02
 4ae:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <umyva_ON_OFF>
			Master_A7(umyva_zal_ID, umyva_ON_OFF);
 4b2:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <umyva_ON_OFF>
 4b6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <umyva_zal_ID>
 4ba:	0e 94 2f 08 	call	0x105e	; 0x105e <Master_A7>
			break;
 4be:	83 c0       	rjmp	.+262    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Zrusenie manualneho rezimu:
		case 0xA8:
			manual_OFF	= UART_0_DATA[1];
 4c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UART_0_DATA+0x1>
 4c4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <manual_OFF>
			Master_A8(manual_OFF);
 4c8:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <manual_OFF>
 4cc:	0e 94 8e 08 	call	0x111c	; 0x111c <Master_A8>
			break;
 4d0:	7a c0       	rjmp	.+244    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Nastavenie datumu a casu:
		case 0xA9:
			nastav_rok		= UART_0_DATA[1];
 4d2:	e1 e0       	ldi	r30, 0x01	; 1
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	81 81       	ldd	r24, Z+1	; 0x01
 4d8:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <nastav_rok>
			nastav_mesiac	= UART_0_DATA[2];
 4dc:	82 81       	ldd	r24, Z+2	; 0x02
 4de:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <nastav_mesiac>
			nastav_den		= UART_0_DATA[3];
 4e2:	83 81       	ldd	r24, Z+3	; 0x03
 4e4:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <nastav_den>
			nastav_hod		= UART_0_DATA[4];
 4e8:	84 81       	ldd	r24, Z+4	; 0x04
 4ea:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <nastav_hod>
			nastav_min		= UART_0_DATA[5];
 4ee:	85 81       	ldd	r24, Z+5	; 0x05
 4f0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <nastav_min>
			nastav_den_n	= UART_0_DATA[6];
 4f4:	86 81       	ldd	r24, Z+6	; 0x06
 4f6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <nastav_den_n>
			DS1307_Set_RTC(nastav_rok, nastav_mesiac, nastav_den, nastav_hod, nastav_min, nastav_den_n);
 4fa:	e0 90 31 01 	lds	r14, 0x0131	; 0x800131 <nastav_den_n>
 4fe:	00 91 1e 01 	lds	r16, 0x011E	; 0x80011e <nastav_min>
 502:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <nastav_hod>
 506:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <nastav_den>
 50a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <nastav_mesiac>
 50e:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <nastav_rok>
 512:	0e 94 6c 05 	call	0xad8	; 0xad8 <DS1307_Set_RTC>
			RTC_Master();
 516:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <RTC_Master>
			// Zmena strany v displeji na page 0:
			USART_0_Transmit_string("page 0");
 51a:	62 e8       	ldi	r22, 0x82	; 130
 51c:	71 e0       	ldi	r23, 0x01	; 1
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
			USART_0_Transmit_char(0xFF);
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
			USART_0_Transmit_char(0xFF);
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
			USART_0_Transmit_char(0xFF);
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
			break;
 536:	47 c0       	rjmp	.+142    	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Budik 1:
		case 0xAB:
			bud1_ON_OFF	= UART_0_DATA[1];
 538:	e1 e0       	ldi	r30, 0x01	; 1
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	81 81       	ldd	r24, Z+1	; 0x01
 53e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <bud1_ON_OFF>
			bud1_min	= UART_0_DATA[2];
 542:	82 81       	ldd	r24, Z+2	; 0x02
 544:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <bud1_min>
			bud1_hod	= UART_0_DATA[3];
 548:	83 81       	ldd	r24, Z+3	; 0x03
 54a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <bud1_hod>
			bud1_nat	= UART_0_DATA[4];
 54e:	84 81       	ldd	r24, Z+4	; 0x04
 550:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <bud1_nat>
			bud1_poz	= UART_0_DATA[5];
 554:	85 81       	ldd	r24, Z+5	; 0x05
 556:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <bud1_poz>
			bud1_zal_ID	= UART_0_DATA[6];
 55a:	86 81       	ldd	r24, Z+6	; 0x06
 55c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <bud1_zal_ID>
			bud1_dni	= UART_0_DATA[7];
 560:	87 81       	ldd	r24, Z+7	; 0x07
 562:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <bud1_dni>
			break;
 566:	2f c0       	rjmp	.+94     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Budik 2:
		case 0xAD:
			bud2_ON_OFF	= UART_0_DATA[1];
 568:	e1 e0       	ldi	r30, 0x01	; 1
 56a:	f1 e0       	ldi	r31, 0x01	; 1
 56c:	81 81       	ldd	r24, Z+1	; 0x01
 56e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			bud2_min	= UART_0_DATA[2];
 572:	82 81       	ldd	r24, Z+2	; 0x02
 574:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <bud2_min>
			bud2_hod	= UART_0_DATA[3];
 578:	83 81       	ldd	r24, Z+3	; 0x03
 57a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <bud2_hod>
			bud2_nat	= UART_0_DATA[4];
 57e:	84 81       	ldd	r24, Z+4	; 0x04
 580:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <bud2_nat>
			bud2_poz	= UART_0_DATA[5];
 584:	85 81       	ldd	r24, Z+5	; 0x05
 586:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <bud2_poz>
			bud2_zal_ID	= UART_0_DATA[6];
 58a:	86 81       	ldd	r24, Z+6	; 0x06
 58c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <bud2_zal_ID>
			bud2_dni	= UART_0_DATA[7];
 590:	87 81       	ldd	r24, Z+7	; 0x07
 592:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <bud2_dni>
			break;
 596:	17 c0       	rjmp	.+46     	; 0x5c6 <__EEPROM_REGION_LENGTH__+0x1c6>
		// Budik 3:
		case 0xAF:
			bud3_ON_OFF	= UART_0_DATA[1];
 598:	e1 e0       	ldi	r30, 0x01	; 1
 59a:	f1 e0       	ldi	r31, 0x01	; 1
 59c:	81 81       	ldd	r24, Z+1	; 0x01
 59e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <bud3_ON_OFF>
			bud3_min	= UART_0_DATA[2];
 5a2:	82 81       	ldd	r24, Z+2	; 0x02
 5a4:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <bud3_min>
			bud3_hod	= UART_0_DATA[3];
 5a8:	83 81       	ldd	r24, Z+3	; 0x03
 5aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <bud3_hod>
			bud3_nat	= UART_0_DATA[4];
 5ae:	84 81       	ldd	r24, Z+4	; 0x04
 5b0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <bud3_nat>
			bud3_poz	= UART_0_DATA[5];
 5b4:	85 81       	ldd	r24, Z+5	; 0x05
 5b6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <bud3_poz>
			bud3_zal_ID	= UART_0_DATA[6];
 5ba:	86 81       	ldd	r24, Z+6	; 0x06
 5bc:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <bud3_zal_ID>
			bud3_dni	= UART_0_DATA[7];
 5c0:	87 81       	ldd	r24, Z+7	; 0x07
 5c2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <bud3_dni>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c6:	2f e7       	ldi	r18, 0x7F	; 127
 5c8:	88 e3       	ldi	r24, 0x38	; 56
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	21 50       	subi	r18, 0x01	; 1
 5ce:	80 40       	sbci	r24, 0x00	; 0
 5d0:	90 40       	sbci	r25, 0x00	; 0
 5d2:	e1 f7       	brne	.-8      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <__EEPROM_REGION_LENGTH__+0x1d6>
 5d6:	00 00       	nop
			break;
	}
	_delay_ms(50);
	LED1_OFF;
 5d8:	8b b1       	in	r24, 0x0b	; 11
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	8b b9       	out	0x0b, r24	; 11
}
 5de:	0f 91       	pop	r16
 5e0:	ef 90       	pop	r14
 5e2:	08 95       	ret

Disassembly of section .text.main:

00000192 <main>:

// Deklaracia funkcie pre prijem dat z displeja:
void UlozDatazDispleja (void);

int main(void){
	LD_SW_init();													// Inicializacia LED0, LED1 a tlacidiel SW0, SW1.
 192:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <LD_SW_init>
	TWI_0_Init();													// Inicializacia TWI_0 komunikacie (DS1307) - bitrate - 100kHz
 196:	0e 94 8e 0a 	call	0x151c	; 0x151c <TWI_0_Init>
	TWI_1_Init();													// Inicializacia TWI_1 komunikacie (SHT31)  - bitrate - 100kHz
 19a:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_1_Init>
	SHT31_Init();													// Inicializacia TWI_1 pre senzor SHT31
 19e:	0e 94 37 0b 	call	0x166e	; 0x166e <SHT31_Init>
	USART_0_Init();													// Inicializacia USART_0 komunikacie (NEXTION) - 2stop bit, 8data bit
 1a2:	0e 94 0c 0a 	call	0x1418	; 0x1418 <USART_0_Init>
	USART_1_Init();													// Inicializacia USART_1 komunikacie (SLAVE)   - 2stop bit, 8data bit
 1a6:	0e 94 be 0a 	call	0x157c	; 0x157c <USART_1_Init>

//	DS1307_Set_RTC(24,4,6,19,40,6);									// Inicializacia datumu a casu [rok, mesiac, den, hodiny, minuty, den(Po-Ne)] - pouzit len na striktne nastavenie (prvykrat).

	sei();															// Zapnutie globalnych preruseni.
 1aa:	78 94       	sei

	Master_start();													// Signalizacia pomocou LED ze master zacal loop.
 1ac:	0e 94 b6 08 	call	0x116c	; 0x116c <Master_start>
	
    while(1){
//		DS1307_RTC_test();											// Test datumu a casu (DS1307 senzora) pomocou tlacidka SW0.
//		SHT31_TempRH_test();										// Test teploty a vlhkosti (SHT31 senzora) pomocou tlacidka SW1.
		
		if(LED0)LED0_ON;											// Kontrolka LED necinnosti.
 1b0:	4c 9b       	sbis	0x09, 4	; 9
 1b2:	03 c0       	rjmp	.+6      	; 0x1ba <main+0x28>
 1b4:	8b b1       	in	r24, 0x0b	; 11
 1b6:	8f 7e       	andi	r24, 0xEF	; 239
 1b8:	8b b9       	out	0x0b, r24	; 11

		if (P_UART_0 != 9 && P_UART_0 != 0){						// Ked nic neprichadza alebo este neprisli vsetky bajty.
 1ba:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <P_UART_0>
 1be:	89 30       	cpi	r24, 0x09	; 9
 1c0:	e9 f0       	breq	.+58     	; 0x1fc <main+0x6a>
 1c2:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <P_UART_0>
 1c6:	88 23       	and	r24, r24
 1c8:	c9 f0       	breq	.+50     	; 0x1fc <main+0x6a>
			poc++;													// Ak prijime menej ako 9 bajtov, alebo viac ako 9, niekde problem...po case zmaz pocitadlo P_UART_0. Ak je P_UART_0 = 0, znamena, ze uz dlhsiu dobu neboli poslane ziadne data.
 1ca:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_end>
 1ce:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_end+0x1>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_end+0x1>
 1d8:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_end>
			if (poc > 65000){										// Ak su poslane data, tak presne 9 bajtov - ak sa nic nemeni dlhsiu dobu > 65000 urob toto.
 1dc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_end>
 1e0:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_end+0x1>
 1e4:	89 3e       	cpi	r24, 0xE9	; 233
 1e6:	9d 4f       	sbci	r25, 0xFD	; 253
 1e8:	48 f0       	brcs	.+18     	; 0x1fc <main+0x6a>
				LED0_ON;
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	8f 7e       	andi	r24, 0xEF	; 239
 1ee:	8b b9       	out	0x0b, r24	; 11
				P_UART_0 = 0;										// Nastav pocitadlo dat na 0 a zahod vsetky data.
 1f0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <P_UART_0>
				poc = 0;											// Znuluj pocitadlo neprijimanie bajtov.
 1f4:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <_end+0x1>
 1f8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_end>
			}
		}
		
		if (P_UART_0 == 9){											// Ak je uz prijatych vsetkych 9 bajtov.
 1fc:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <P_UART_0>
 200:	89 30       	cpi	r24, 0x09	; 9
 202:	09 f0       	breq	.+2      	; 0x206 <main+0x74>
 204:	87 c0       	rjmp	.+270    	; 0x314 <main+0x182>
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	90 e7       	ldi	r25, 0x70	; 112
 20a:	22 e0       	ldi	r18, 0x02	; 2
 20c:	81 50       	subi	r24, 0x01	; 1
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	20 40       	sbci	r18, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x7a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x84>
 216:	00 00       	nop
			_delay_ms(100);
			char temp;
			temp = UART_0_DATA[0]+UART_0_DATA[1]+UART_0_DATA[2]+UART_0_DATA[3]+UART_0_DATA[4]+UART_0_DATA[5]+UART_0_DATA[6]+UART_0_DATA[7];
 218:	e1 e0       	ldi	r30, 0x01	; 1
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	70 81       	ld	r23, Z
 21e:	81 81       	ldd	r24, Z+1	; 0x01
 220:	62 81       	ldd	r22, Z+2	; 0x02
 222:	53 81       	ldd	r21, Z+3	; 0x03
 224:	44 81       	ldd	r20, Z+4	; 0x04
 226:	35 81       	ldd	r19, Z+5	; 0x05
 228:	26 81       	ldd	r18, Z+6	; 0x06
 22a:	97 81       	ldd	r25, Z+7	; 0x07
 22c:	87 0f       	add	r24, r23
 22e:	86 0f       	add	r24, r22
 230:	85 0f       	add	r24, r21
 232:	84 0f       	add	r24, r20
 234:	83 0f       	add	r24, r19
 236:	82 0f       	add	r24, r18
 238:	89 0f       	add	r24, r25
			if (temp == UART_0_DATA[8]){							// Porovnanie suctu s CHECKSUM.
 23a:	90 85       	ldd	r25, Z+8	; 0x08
 23c:	89 13       	cpse	r24, r25
 23e:	63 c0       	rjmp	.+198    	; 0x306 <main+0x174>
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	90 e7       	ldi	r25, 0x70	; 112
 244:	22 e0       	ldi	r18, 0x02	; 2
 246:	81 50       	subi	r24, 0x01	; 1
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	20 40       	sbci	r18, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0xb4>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0xbe>
 250:	00 00       	nop
				_delay_ms(100);
				
				// Zobrazenie stavu "Cakajte.....hotovo" v displeji:
				USART_0_Transmit_string("vis t0,");					
 252:	69 e8       	ldi	r22, 0x89	; 137
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
				USART_0_Transmit_char(0x31);
 25c:	81 e3       	ldi	r24, 0x31	; 49
 25e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 26e:	8f ef       	ldi	r24, 0xFF	; 255
 270:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	95 ea       	ldi	r25, 0xA5	; 165
 278:	2e e0       	ldi	r18, 0x0E	; 14
 27a:	81 50       	subi	r24, 0x01	; 1
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	20 40       	sbci	r18, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <main+0xe8>
 282:	00 c0       	rjmp	.+0      	; 0x284 <main+0xf2>
 284:	00 00       	nop
				_delay_ms(600);
				// Skrytie stavu "Cakajte.....hotovo" v displeji:
				USART_0_Transmit_string("vis t0,");
 286:	69 e8       	ldi	r22, 0x89	; 137
 288:	71 e0       	ldi	r23, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
				USART_0_Transmit_char(0x30);
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
				USART_0_Transmit_char(0xFF);
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 2a8:	8f e7       	ldi	r24, 0x7F	; 127
 2aa:	98 e3       	ldi	r25, 0x38	; 56
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	81 50       	subi	r24, 0x01	; 1
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	20 40       	sbci	r18, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x11c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x126>
 2b8:	00 00       	nop
				_delay_ms(50);
											
				UlozDatazDispleja();								// Nacitanie dat z displeja do premennych pre dalsie pokyny.
 2ba:	0e 94 ff 01 	call	0x3fe	; 0x3fe <UlozDatazDispleja>
 2be:	28 c0       	rjmp	.+80     	; 0x310 <main+0x17e>
			}else{
				// Ak sa zobudi display z necinnosti nahraj data z mastra do displeja:
				for(int i = 0; i < 3; i++){
					if(UART_0_DATA[0] == 0x87 || UART_0_DATA[0] == 0x88 || UART_0_DATA[0] == 0x68){
 2c0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <UART_0_DATA>
 2c4:	27 38       	cpi	r18, 0x87	; 135
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <main+0x146>
 2c8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <UART_0_DATA>
 2cc:	28 38       	cpi	r18, 0x88	; 136
 2ce:	21 f0       	breq	.+8      	; 0x2d8 <main+0x146>
 2d0:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <UART_0_DATA>
 2d4:	28 36       	cpi	r18, 0x68	; 104
 2d6:	a9 f4       	brne	.+42     	; 0x302 <main+0x170>
						RTC_Master();								// Odoslanie aktualneho datumu a casu do displeja.
 2d8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <RTC_Master>
						TempRH_Master();							// Odoslanie vnutornej teploty a vlhkosti do displeja.
 2dc:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <TempRH_Master>
						TempWind_Outdoor();							// Odoslanie vonkajsej teploty a rychlosti vetra do displeja.
 2e0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TempWind_Outdoor>
						// Prikaz na aktualizaciu dat pomocou "page 0", ("ref 0" - nefunguje spravne):
						USART_0_Transmit_string("page 0");			
 2e4:	62 e8       	ldi	r22, 0x82	; 130
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
						USART_0_Transmit_char(0xFF);
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
						USART_0_Transmit_char(0xFF);
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
						USART_0_Transmit_char(0xFF);
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
						break;
 300:	07 c0       	rjmp	.+14     	; 0x310 <main+0x17e>
				_delay_ms(50);
											
				UlozDatazDispleja();								// Nacitanie dat z displeja do premennych pre dalsie pokyny.
			}else{
				// Ak sa zobudi display z necinnosti nahraj data z mastra do displeja:
				for(int i = 0; i < 3; i++){
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	02 c0       	rjmp	.+4      	; 0x30a <main+0x178>
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	91 05       	cpc	r25, r1
 30e:	c4 f2       	brlt	.-80     	; 0x2c0 <main+0x12e>
						USART_0_Transmit_char(0xFF);
						break;
					}
				}
			}
			P_UART_0 = 0;											// Nastav pocitadlo dat na 0 a zahod vsetky data.
 310:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <P_UART_0>
		}

		// Podmienka ktora kazdu minutu aktualizuje datum, cas, teplotu a vlhkost, kontroluje budiky a posiela data do SLAVE zariadeni:
		uint8_t act_min = BCD_to_Decimal(DS1307_Read(0x01));		// Adresa "0x01" je aktualna hodnota pre minuty v RTC/DS1307.
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 31a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
		if(act_min != last_min){									// Ak sa prebehla minuta, tak aktualizuj data
 31e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <last_min>
 322:	89 17       	cp	r24, r25
 324:	09 f4       	brne	.+2      	; 0x328 <main+0x196>
 326:	44 cf       	rjmp	.-376    	; 0x1b0 <main+0x1e>
			last_min = BCD_to_Decimal(DS1307_Read(0x01));			// Aktualizovanie premennej pre poslednu nacitanu minutu z DS1307.
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 32e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 332:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <last_min>
			
			RTC_Master();											// Odoslanie aktualneho datumu a casu do displeja.
 336:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <RTC_Master>
			TempRH_Master();										// Odoslanie vnutornej teploty a vlhkosti do displeja.
 33a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <TempRH_Master>
			TempWind_Outdoor();										// Odoslanie vonkajsej teploty a rychlosti vetra do displeja.
 33e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <TempWind_Outdoor>
			ActualDataforSlave();									// Odoslanie teploty, vetra a osvetlenia do SLAVE zariadeni.
 342:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ActualDataforSlave>
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	90 e7       	ldi	r25, 0x70	; 112
 34a:	22 e0       	ldi	r18, 0x02	; 2
 34c:	81 50       	subi	r24, 0x01	; 1
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	20 40       	sbci	r18, 0x00	; 0
 352:	e1 f7       	brne	.-8      	; 0x34c <main+0x1ba>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x1c4>
 356:	00 00       	nop
			_delay_ms(100);
			if(bud1_ON_OFF){										// Ak je aktivny status pre budik 1.
 358:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <bud1_ON_OFF>
 35c:	88 23       	and	r24, r24
 35e:	b9 f0       	breq	.+46     	; 0x38e <main+0x1fc>
				Master_Alarm(bud1_min, bud1_hod, bud1_nat, bud1_poz, bud1_zal_ID, bud1_dni);
 360:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <bud1_dni>
 364:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <bud1_zal_ID>
 368:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <bud1_poz>
 36c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <bud1_nat>
 370:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <bud1_hod>
 374:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <bud1_min>
 378:	0e 94 a2 03 	call	0x744	; 0x744 <Master_Alarm>
 37c:	8f e7       	ldi	r24, 0x7F	; 127
 37e:	98 e3       	ldi	r25, 0x38	; 56
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	81 50       	subi	r24, 0x01	; 1
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x1f0>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x1fa>
 38c:	00 00       	nop
				_delay_ms(50);
			}
			if(bud2_ON_OFF){										// Ak je aktivny status pre budik 2.
 38e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 392:	88 23       	and	r24, r24
 394:	b9 f0       	breq	.+46     	; 0x3c4 <main+0x232>
				Master_Alarm(bud2_min, bud2_hod, bud2_nat, bud2_poz, bud2_zal_ID, bud2_dni);
 396:	e0 90 2f 01 	lds	r14, 0x012F	; 0x80012f <bud2_dni>
 39a:	00 91 10 01 	lds	r16, 0x0110	; 0x800110 <bud2_zal_ID>
 39e:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <bud2_poz>
 3a2:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <bud2_nat>
 3a6:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <bud2_hod>
 3aa:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <bud2_min>
 3ae:	0e 94 a2 03 	call	0x744	; 0x744 <Master_Alarm>
 3b2:	8f e7       	ldi	r24, 0x7F	; 127
 3b4:	98 e3       	ldi	r25, 0x38	; 56
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	81 50       	subi	r24, 0x01	; 1
 3ba:	90 40       	sbci	r25, 0x00	; 0
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x226>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <main+0x230>
 3c2:	00 00       	nop
				_delay_ms(50);
			}
			if(bud3_ON_OFF){										// Ak je aktivny status pre budik 3.
 3c4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <bud3_ON_OFF>
 3c8:	88 23       	and	r24, r24
 3ca:	09 f4       	brne	.+2      	; 0x3ce <main+0x23c>
 3cc:	f1 ce       	rjmp	.-542    	; 0x1b0 <main+0x1e>
				Master_Alarm(bud3_min, bud3_hod, bud3_nat, bud3_poz, bud3_zal_ID, bud3_dni);
 3ce:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <bud3_dni>
 3d2:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <bud3_zal_ID>
 3d6:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <bud3_poz>
 3da:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <bud3_nat>
 3de:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <bud3_hod>
 3e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <bud3_min>
 3e6:	0e 94 a2 03 	call	0x744	; 0x744 <Master_Alarm>
 3ea:	8f e7       	ldi	r24, 0x7F	; 127
 3ec:	98 e3       	ldi	r25, 0x38	; 56
 3ee:	21 e0       	ldi	r18, 0x01	; 1
 3f0:	81 50       	subi	r24, 0x01	; 1
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	20 40       	sbci	r18, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x25e>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x268>
 3fa:	00 00       	nop
 3fc:	d9 ce       	rjmp	.-590    	; 0x1b0 <main+0x1e>

Disassembly of section .text.__vector_20:

00001248 <__vector_20>:
}


// Prerusenie od prijimu USART0 RXC - prijem od displeja:
ISR(USART0_RX_vect, ISR_NAKED){
	asm ("in r15, __SREG__");
    1248:	ff b6       	in	r15, 0x3f	; 63
	asm ("push r15");
    124a:	ff 92       	push	r15
	asm ("push r24");
    124c:	8f 93       	push	r24
	asm ("push r25");
    124e:	9f 93       	push	r25
	asm ("push r30");
    1250:	ef 93       	push	r30
	asm ("push r31");
    1252:	ff 93       	push	r31
	
	UART_0_DATA[P_UART_0] = UDR0;						// Uloz prijate data.
    1254:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <P_UART_0>
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    125e:	ef 5f       	subi	r30, 0xFF	; 255
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	80 83       	st	Z, r24
	P_UART_0++;											// Inkrementuj pocitadlo - budem z displeja posielat stale 9 bajtov.
    1264:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <P_UART_0>
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <P_UART_0>
	poc = 0;											// Po prijati bajtu, zmaz pocitadlo necinnosti.
    126e:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <_end+0x1>
    1272:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <_end>

	USART_0_Flush();									// Vyprazdnenie prijimanych udajov (Flushing the Receive Buffer).
    1276:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <USART_0_Flush>
	
	asm ("pop r31");
    127a:	ff 91       	pop	r31
	asm ("pop r30");
    127c:	ef 91       	pop	r30
	asm ("pop r25");									// Vytiahni r25 zo zasobnika.
    127e:	9f 91       	pop	r25
	asm ("pop r24");									// Vytiahni r24 zo zasobnika.
    1280:	8f 91       	pop	r24
	asm ("pop r15");									// Vytiahni Status register SREG kvoli Carry flag ked sa porovnava - zo zasobnika cez r15 - r15 nie je nikde v hlavnom prog. pouzita.
    1282:	ff 90       	pop	r15
	asm("out __SREG__ , r15");
    1284:	ff be       	out	0x3f, r15	; 63
	
	reti();												// Navrat spat do programu.
    1286:	18 95       	reti

Disassembly of section .text.Master_start:

0000116c <Master_start>:

#include "MASTER_GPIO.h"

// Indikator zaciatku behu programu (loopu) pre MASTER:
void Master_start(void){
	for(int x = 0; x < 3; x++){
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	20 c0       	rjmp	.+64     	; 0x11b2 <Master_start+0x46>
		LED0_ON;
    1172:	8b b1       	in	r24, 0x0b	; 11
    1174:	8f 7e       	andi	r24, 0xEF	; 239
    1176:	8b b9       	out	0x0b, r24	; 11
		LED1_ON;
    1178:	8b b1       	in	r24, 0x0b	; 11
    117a:	8f 7d       	andi	r24, 0xDF	; 223
    117c:	8b b9       	out	0x0b, r24	; 11
    117e:	4f ef       	ldi	r20, 0xFF	; 255
    1180:	81 ee       	ldi	r24, 0xE1	; 225
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	41 50       	subi	r20, 0x01	; 1
    1186:	80 40       	sbci	r24, 0x00	; 0
    1188:	90 40       	sbci	r25, 0x00	; 0
    118a:	e1 f7       	brne	.-8      	; 0x1184 <Master_start+0x18>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <Master_start+0x22>
    118e:	00 00       	nop
		_delay_ms(200);
		LED0_OFF;
    1190:	8b b1       	in	r24, 0x0b	; 11
    1192:	80 61       	ori	r24, 0x10	; 16
    1194:	8b b9       	out	0x0b, r24	; 11
		LED1_OFF;
    1196:	8b b1       	in	r24, 0x0b	; 11
    1198:	80 62       	ori	r24, 0x20	; 32
    119a:	8b b9       	out	0x0b, r24	; 11
    119c:	4f ef       	ldi	r20, 0xFF	; 255
    119e:	80 e7       	ldi	r24, 0x70	; 112
    11a0:	92 e0       	ldi	r25, 0x02	; 2
    11a2:	41 50       	subi	r20, 0x01	; 1
    11a4:	80 40       	sbci	r24, 0x00	; 0
    11a6:	90 40       	sbci	r25, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <Master_start+0x36>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <Master_start+0x40>
    11ac:	00 00       	nop

#include "MASTER_GPIO.h"

// Indikator zaciatku behu programu (loopu) pre MASTER:
void Master_start(void){
	for(int x = 0; x < 3; x++){
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	23 30       	cpi	r18, 0x03	; 3
    11b4:	31 05       	cpc	r19, r1
    11b6:	ec f2       	brlt	.-70     	; 0x1172 <Master_start+0x6>
		_delay_ms(200);
		LED0_OFF;
		LED1_OFF;
		_delay_ms(100);
	}
}
    11b8:	08 95       	ret

Disassembly of section .text.LD_SW_init:

000015c4 <LD_SW_init>:

// Nastavenie portov pre LED a tlacidla:
void LD_SW_init(void){
	DDRD = (1<<DDD4)|(1<<DDD5);							// Port PD4 a PD5 - [VYSTUP  - 1] -  LED0 a LED1.
    15c4:	80 e3       	ldi	r24, 0x30	; 48
    15c6:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~((1<<PORTD6)|(1<<PORTD7));					// Port PD6 a PD7 - [VSTUP   - 0] -  SW0 a SW1.
    15c8:	8a b1       	in	r24, 0x0a	; 10
    15ca:	8f 73       	andi	r24, 0x3F	; 63
    15cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PORTD6)|(1<<PORTD7);					// Port PD6 a PD7 - [PULL_UP - 1] -  SW0 a SW1.
    15ce:	80 ec       	ldi	r24, 0xC0	; 192
    15d0:	8b b9       	out	0x0b, r24	; 11
    15d2:	08 95       	ret

Disassembly of section .text.TWI_0_Init:

0000151c <TWI_0_Init>:

// ******************* [TWI_0/I2C] Senzor datumu a casu [DS1307] ******************* //

// Inicializacia TWI_0 komunikacie:
void TWI_0_Init(void){
	TWBR0 = ((F_CPU/SCL_CLOCK)-16)/2 >> 8;				// bit rate z 8Mhz na 100kHz prescaler = 00, hodnota TWBR musi byt viac ako 10.
    151c:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	
// Nastavenie rychlosti prenosu dat na hodnotu 100KHz:
	TWSR0 &= ~(1 << TWPS0);
    1520:	e9 eb       	ldi	r30, 0xB9	; 185
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8e 7f       	andi	r24, 0xFE	; 254
    1528:	80 83       	st	Z, r24
	TWSR0 &= ~(1 << TWPS1);
    152a:	80 81       	ld	r24, Z
    152c:	8d 7f       	andi	r24, 0xFD	; 253
    152e:	80 83       	st	Z, r24
	
// Nastavenie Pull_Up pre TWI_0/I2C komunikaciu:
	DDRC &= ~((1<<PORTC0)|(1<<PORTC1));					// Logicka 0 pre SDA(PORTC0) a SCL(PORTC1) - [VSTUP] 
    1530:	87 b1       	in	r24, 0x07	; 7
    1532:	8c 7f       	andi	r24, 0xFC	; 252
    1534:	87 b9       	out	0x07, r24	; 7
	PORTC = (1<<PORTC0)|(1<<PORTC1);					// Zapnutie pull_up rezistorov na SDA(PORTC0) a SCL(PORTC1) pinoch.
    1536:	83 e0       	ldi	r24, 0x03	; 3
    1538:	88 b9       	out	0x08, r24	; 8
    153a:	08 95       	ret

Disassembly of section .text.TWI_0_Start:

00001288 <TWI_0_Start>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
    1288:	84 ea       	ldi	r24, 0xA4	; 164
    128a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	05 c0       	rjmp	.+10     	; 0x129e <TWI_0_Start+0x16>
    1294:	89 3e       	cpi	r24, 0xE9	; 233
    1296:	23 e0       	ldi	r18, 0x03	; 3
    1298:	92 07       	cpc	r25, r18
    129a:	2c f4       	brge	.+10     	; 0x12a6 <TWI_0_Start+0x1e>
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    12a2:	22 23       	and	r18, r18
    12a4:	bc f7       	brge	.-18     	; 0x1294 <TWI_0_Start+0xc>
    12a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    12aa:	88 7f       	andi	r24, 0xF8	; 248
    12ac:	88 30       	cpi	r24, 0x08	; 8
    12ae:	39 f0       	breq	.+14     	; 0x12be <TWI_0_Start+0x36>
    12b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    12b4:	88 7f       	andi	r24, 0xF8	; 248
    12b6:	80 31       	cpi	r24, 0x10	; 16
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <TWI_0_Start+0x3a>
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	08 95       	ret
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	08 95       	ret
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	08 95       	ret

Disassembly of section .text.TWI_0_Stop:

0000153c <TWI_0_Stop>:
	return 0;
}

// Funkcia na odoslanie STOP podmienky pre TWI_0/I2C:
unsigned char TWI_0_Stop(void){
	TWCR0 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    153c:	84 e9       	ldi	r24, 0x94	; 148
    153e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
// Cakanie na TWSTO flag. (pocka na jej dokoncenie):
	while(!(TWCR0 & (1<<TWSTO)))
    1542:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1546:	84 ff       	sbrs	r24, 4
    1548:	fc cf       	rjmp	.-8      	; 0x1542 <TWI_0_Stop+0x6>
		;
		
// Kontrola hodnoty TWI_0/I2C status registra:
	if ((TWSR0 & 0xF8) != TW_SR_STOP)
    154a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    154e:	88 7f       	andi	r24, 0xF8	; 248
    1550:	80 3a       	cpi	r24, 0xA0	; 160
    1552:	11 f0       	breq	.+4      	; 0x1558 <TWI_0_Stop+0x1c>
		return 1;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	08 95       	ret
	return 0;
    1558:	80 e0       	ldi	r24, 0x00	; 0
}
    155a:	08 95       	ret

Disassembly of section .text.TWI_0_Write:

00001304 <TWI_0_Write>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
    1304:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    1308:	84 e8       	ldi	r24, 0x84	; 132
    130a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	05 c0       	rjmp	.+10     	; 0x131e <TWI_0_Write+0x1a>
    1314:	89 3e       	cpi	r24, 0xE9	; 233
    1316:	23 e0       	ldi	r18, 0x03	; 3
    1318:	92 07       	cpc	r25, r18
    131a:	2c f4       	brge	.+10     	; 0x1326 <TWI_0_Write+0x22>
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1322:	22 23       	and	r18, r18
    1324:	bc f7       	brge	.-18     	; 0x1314 <TWI_0_Write+0x10>
    1326:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    132a:	88 7f       	andi	r24, 0xF8	; 248
    132c:	88 32       	cpi	r24, 0x28	; 40
    132e:	11 f0       	breq	.+4      	; 0x1334 <TWI_0_Write+0x30>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	08 95       	ret

Disassembly of section .text.TWI_0_Read_nAck:

00001490 <TWI_0_Read_nAck>:
    1490:	84 e8       	ldi	r24, 0x84	; 132
    1492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <TWI_0_Read_nAck+0x16>
    149c:	89 3e       	cpi	r24, 0xE9	; 233
    149e:	23 e0       	ldi	r18, 0x03	; 3
    14a0:	92 07       	cpc	r25, r18
    14a2:	2c f4       	brge	.+10     	; 0x14ae <TWI_0_Read_nAck+0x1e>
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    14aa:	22 23       	and	r18, r18
    14ac:	bc f7       	brge	.-18     	; 0x149c <TWI_0_Read_nAck+0xc>
    14ae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    14b2:	08 95       	ret

Disassembly of section .text.BCD_to_Decimal:

00001598 <BCD_to_Decimal>:
	return TWDR0;
}

// Funkcia na prevod binarneho cisla [Binary-Coded Decimal] na cele cislo:
uint8_t BCD_to_Decimal(uint8_t bcd){
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
    1598:	98 2f       	mov	r25, r24
    159a:	92 95       	swap	r25
    159c:	9f 70       	andi	r25, 0x0F	; 15
    159e:	99 0f       	add	r25, r25
    15a0:	29 2f       	mov	r18, r25
    15a2:	22 0f       	add	r18, r18
    15a4:	22 0f       	add	r18, r18
    15a6:	92 0f       	add	r25, r18
    15a8:	8f 70       	andi	r24, 0x0F	; 15
}
    15aa:	89 0f       	add	r24, r25
    15ac:	08 95       	ret

Disassembly of section .text.Decimal_to_BCD:

000013c6 <Decimal_to_BCD>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
    13c6:	9d ec       	ldi	r25, 0xCD	; 205
    13c8:	89 9f       	mul	r24, r25
    13ca:	91 2d       	mov	r25, r1
    13cc:	11 24       	eor	r1, r1
    13ce:	96 95       	lsr	r25
    13d0:	96 95       	lsr	r25
    13d2:	96 95       	lsr	r25
    13d4:	39 2f       	mov	r19, r25
    13d6:	33 0f       	add	r19, r19
    13d8:	23 2f       	mov	r18, r19
    13da:	22 0f       	add	r18, r18
    13dc:	22 0f       	add	r18, r18
    13de:	23 0f       	add	r18, r19
    13e0:	82 1b       	sub	r24, r18
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e1       	ldi	r19, 0x10	; 16
    13e6:	93 9f       	mul	r25, r19
    13e8:	c0 01       	movw	r24, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	82 2b       	or	r24, r18
    13ee:	08 95       	ret

Disassembly of section .text.DS1307_Write:

000013f0 <DS1307_Write>:
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	d8 2f       	mov	r29, r24
    13f6:	c6 2f       	mov	r28, r22
    13f8:	0e 94 44 09 	call	0x1288	; 0x1288 <TWI_0_Start>
    13fc:	80 ed       	ldi	r24, 0xD0	; 208
    13fe:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    1402:	8d 2f       	mov	r24, r29
    1404:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    1408:	8c 2f       	mov	r24, r28
    140a:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    140e:	0e 94 9e 0a 	call	0x153c	; 0x153c <TWI_0_Stop>
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

Disassembly of section .text.DS1307_Read:

0000136c <DS1307_Read>:
    136c:	cf 93       	push	r28
    136e:	c8 2f       	mov	r28, r24
    1370:	0e 94 44 09 	call	0x1288	; 0x1288 <TWI_0_Start>
    1374:	80 ed       	ldi	r24, 0xD0	; 208
    1376:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    137a:	8c 2f       	mov	r24, r28
    137c:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    1380:	0e 94 44 09 	call	0x1288	; 0x1288 <TWI_0_Start>
    1384:	81 ed       	ldi	r24, 0xD1	; 209
    1386:	0e 94 82 09 	call	0x1304	; 0x1304 <TWI_0_Write>
    138a:	0e 94 48 0a 	call	0x1490	; 0x1490 <TWI_0_Read_nAck>
    138e:	c8 2f       	mov	r28, r24
    1390:	0e 94 9e 0a 	call	0x153c	; 0x153c <TWI_0_Stop>
    1394:	8c 2f       	mov	r24, r28
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

Disassembly of section .text.DS1307_Set_RTC:

00000ad8 <DS1307_Set_RTC>:
 ad8:	ef 92       	push	r14
 ada:	ff 92       	push	r15
 adc:	0f 93       	push	r16
 ade:	1f 93       	push	r17
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
 ae4:	c8 2f       	mov	r28, r24
 ae6:	d6 2f       	mov	r29, r22
 ae8:	14 2f       	mov	r17, r20
 aea:	f2 2e       	mov	r15, r18
 aec:	4d 99       	sbic	0x09, 5	; 9
 aee:	03 c0       	rjmp	.+6      	; 0xaf6 <DS1307_Set_RTC+0x1e>
 af0:	8b b1       	in	r24, 0x0b	; 11
 af2:	8f 7d       	andi	r24, 0xDF	; 223
 af4:	8b b9       	out	0x0b, r24	; 11
 af6:	4c 9b       	sbis	0x09, 4	; 9
 af8:	03 c0       	rjmp	.+6      	; 0xb00 <DS1307_Set_RTC+0x28>
 afa:	8b b1       	in	r24, 0x0b	; 11
 afc:	80 61       	ori	r24, 0x10	; 16
 afe:	8b b9       	out	0x0b, r24	; 11
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b06:	68 2f       	mov	r22, r24
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b0e:	80 2f       	mov	r24, r16
 b10:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b14:	68 2f       	mov	r22, r24
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b1c:	8f 2d       	mov	r24, r15
 b1e:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b22:	68 2f       	mov	r22, r24
 b24:	82 e0       	ldi	r24, 0x02	; 2
 b26:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b2a:	8e 2d       	mov	r24, r14
 b2c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b30:	68 2f       	mov	r22, r24
 b32:	83 e0       	ldi	r24, 0x03	; 3
 b34:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b38:	81 2f       	mov	r24, r17
 b3a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b3e:	68 2f       	mov	r22, r24
 b40:	84 e0       	ldi	r24, 0x04	; 4
 b42:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b46:	8d 2f       	mov	r24, r29
 b48:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b4c:	68 2f       	mov	r22, r24
 b4e:	85 e0       	ldi	r24, 0x05	; 5
 b50:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b54:	8c 2f       	mov	r24, r28
 b56:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Decimal_to_BCD>
 b5a:	68 2f       	mov	r22, r24
 b5c:	86 e0       	ldi	r24, 0x06	; 6
 b5e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <DS1307_Write>
 b62:	2f e7       	ldi	r18, 0x7F	; 127
 b64:	88 e3       	ldi	r24, 0x38	; 56
 b66:	91 e0       	ldi	r25, 0x01	; 1
 b68:	21 50       	subi	r18, 0x01	; 1
 b6a:	80 40       	sbci	r24, 0x00	; 0
 b6c:	90 40       	sbci	r25, 0x00	; 0
 b6e:	e1 f7       	brne	.-8      	; 0xb68 <DS1307_Set_RTC+0x90>
 b70:	00 c0       	rjmp	.+0      	; 0xb72 <DS1307_Set_RTC+0x9a>
 b72:	00 00       	nop
 b74:	8b b1       	in	r24, 0x0b	; 11
 b76:	80 62       	ori	r24, 0x20	; 32
 b78:	8b b9       	out	0x0b, r24	; 11
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	1f 91       	pop	r17
 b80:	0f 91       	pop	r16
 b82:	ff 90       	pop	r15
 b84:	ef 90       	pop	r14
 b86:	08 95       	ret

Disassembly of section .text.TWI_1_Init:

000014d8 <TWI_1_Init>:

// ******************* [TWI_1/I2C] Senzor teploty a vlhkosti [SHT31] ******************* //

// Inicializacia TWI_1 komunikacie:
void TWI_1_Init(void){
	TWBR1 = ((F_CPU/SCL_CLOCK)-16)/2;					// bit rate z 8Mhz na 100kHz prescaler = 00, hodnota TWBR musi byt viac ako 10.
    14d8:	80 e2       	ldi	r24, 0x20	; 32
    14da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
	
	// Nastavenie rychlosti prenosu dat na hodnotu 100KHz:
	TWSR1 &= ~(1 << TWPS0);
    14de:	e9 ed       	ldi	r30, 0xD9	; 217
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	8e 7f       	andi	r24, 0xFE	; 254
    14e6:	80 83       	st	Z, r24
	TWSR1 &= ~(1 << TWPS1);
    14e8:	80 81       	ld	r24, Z
    14ea:	8d 7f       	andi	r24, 0xFD	; 253
    14ec:	80 83       	st	Z, r24
	
	// Nastavenie Pull_Up pre TWI_1/I2C komunikaciu:
	DDRE &= ~((1<<PORTE5)|(1<<PORTE6));					// Logicka 0 pre SDA(PORTE5) a SCL(PORTE6) - [VSTUP]
    14ee:	8d b1       	in	r24, 0x0d	; 13
    14f0:	8f 79       	andi	r24, 0x9F	; 159
    14f2:	8d b9       	out	0x0d, r24	; 13
	PORTE = (1<<PORTE5)|(1<<PORTE6);					// Zapnutie pull_up rezistorov na SDA(PORTE5) a SCL(PORTE6) pinoch.
    14f4:	80 e6       	ldi	r24, 0x60	; 96
    14f6:	8e b9       	out	0x0e, r24	; 14
    14f8:	08 95       	ret

Disassembly of section .text.TWI_1_Start:

000012c6 <TWI_1_Start>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
    12c6:	84 ea       	ldi	r24, 0xA4	; 164
    12c8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	05 c0       	rjmp	.+10     	; 0x12dc <TWI_1_Start+0x16>
    12d2:	89 3e       	cpi	r24, 0xE9	; 233
    12d4:	23 e0       	ldi	r18, 0x03	; 3
    12d6:	92 07       	cpc	r25, r18
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <TWI_1_Start+0x1e>
    12da:	01 96       	adiw	r24, 0x01	; 1
    12dc:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    12e0:	22 23       	and	r18, r18
    12e2:	bc f7       	brge	.-18     	; 0x12d2 <TWI_1_Start+0xc>
    12e4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    12e8:	88 7f       	andi	r24, 0xF8	; 248
    12ea:	88 30       	cpi	r24, 0x08	; 8
    12ec:	39 f0       	breq	.+14     	; 0x12fc <TWI_1_Start+0x36>
    12ee:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    12f2:	88 7f       	andi	r24, 0xF8	; 248
    12f4:	80 31       	cpi	r24, 0x10	; 16
    12f6:	21 f4       	brne	.+8      	; 0x1300 <TWI_1_Start+0x3a>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	08 95       	ret
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	08 95       	ret
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	08 95       	ret

Disassembly of section .text.TWI_1_Stop:

0000155c <TWI_1_Stop>:
	return 0;
}

// Funkcia na odoslanie STOP podmienky pre TWI_1/I2C:
unsigned char TWI_1_Stop(void){
	TWCR1 = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
    155c:	84 e9       	ldi	r24, 0x94	; 148
    155e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	// Cakanie na TWSTO flag. (pocka na jej dokoncenie):
	while(!(TWCR1 & (1<<TWSTO)))
    1562:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1566:	84 ff       	sbrs	r24, 4
    1568:	fc cf       	rjmp	.-8      	; 0x1562 <TWI_1_Stop+0x6>
	;
	
	// Kontrola hodnoty TWI_1/I2C status registra:
	if ((TWSR1 & 0xF8) != TW_SR_STOP)
    156a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    156e:	88 7f       	andi	r24, 0xF8	; 248
    1570:	80 3a       	cpi	r24, 0xA0	; 160
    1572:	11 f0       	breq	.+4      	; 0x1578 <TWI_1_Stop+0x1c>
		return 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	08 95       	ret
	return 0;
    1578:	80 e0       	ldi	r24, 0x00	; 0
}
    157a:	08 95       	ret

Disassembly of section .text.TWI_1_Write:

00001338 <TWI_1_Write>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
    1338:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
    133c:	84 e8       	ldi	r24, 0x84	; 132
    133e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	05 c0       	rjmp	.+10     	; 0x1352 <TWI_1_Write+0x1a>
    1348:	89 3e       	cpi	r24, 0xE9	; 233
    134a:	23 e0       	ldi	r18, 0x03	; 3
    134c:	92 07       	cpc	r25, r18
    134e:	2c f4       	brge	.+10     	; 0x135a <TWI_1_Write+0x22>
    1350:	01 96       	adiw	r24, 0x01	; 1
    1352:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    1356:	22 23       	and	r18, r18
    1358:	bc f7       	brge	.-18     	; 0x1348 <TWI_1_Write+0x10>
    135a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
    135e:	88 7f       	andi	r24, 0xF8	; 248
    1360:	88 32       	cpi	r24, 0x28	; 40
    1362:	11 f0       	breq	.+4      	; 0x1368 <TWI_1_Write+0x30>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	08 95       	ret
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	08 95       	ret

Disassembly of section .text.TWI_1_Read_nAck:

000014b4 <TWI_1_Read_nAck>:

// Funkcia na prijem byte-u zo zbernice - posledny bajt, vrati prijaty bajt a nasleduje stop bit:
unsigned char TWI_1_Read_nAck(void){
	TWCR1 = (1<<TWINT)|(1<<TWEN);						// Clear TWINT bit in TWCR to start transmission of data.
    14b4:	84 e8       	ldi	r24, 0x84	; 132
    14b6:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
	
	// Cakanie na TWINT flag s osetrenim zacyklenia:
	int i = 0;
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
	while(!(TWCR1 & (1<<TWINT))){
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <TWI_1_Read_nAck+0x16>
		if(i>1000)
    14c0:	89 3e       	cpi	r24, 0xE9	; 233
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	92 07       	cpc	r25, r18
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <TWI_1_Read_nAck+0x1e>
			break;
		i++;
    14c8:	01 96       	adiw	r24, 0x01	; 1
unsigned char TWI_1_Read_nAck(void){
	TWCR1 = (1<<TWINT)|(1<<TWEN);						// Clear TWINT bit in TWCR to start transmission of data.
	
	// Cakanie na TWINT flag s osetrenim zacyklenia:
	int i = 0;
	while(!(TWCR1 & (1<<TWINT))){
    14ca:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7f80dc>
    14ce:	22 23       	and	r18, r18
    14d0:	bc f7       	brge	.-18     	; 0x14c0 <TWI_1_Read_nAck+0xc>
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
    14d2:	80 91 db 00 	lds	r24, 0x00DB	; 0x8000db <__TEXT_REGION_LENGTH__+0x7f80db>
}
    14d6:	08 95       	ret

Disassembly of section .text.SHT31_Init:

0000166e <SHT31_Init>:

// Funkcia na inicializaciu senzora SHT31:
void SHT31_Init(void){
	TWI_1_Init();
    166e:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <TWI_1_Init>
    1672:	08 95       	ret

Disassembly of section .text.SHT31_ReadTemperature:

00000de2 <SHT31_ReadTemperature>:
		if(i>1000)
			break;
		i++;
	}
	return TWDR1;
}
 de2:	cf 93       	push	r28
 de4:	df 93       	push	r29
 de6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <TWI_1_Start>
 dea:	88 e8       	ldi	r24, 0x88	; 136
 dec:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 df0:	8c e2       	ldi	r24, 0x2C	; 44
 df2:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 df6:	86 e0       	ldi	r24, 0x06	; 6
 df8:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 dfc:	8f e3       	ldi	r24, 0x3F	; 63
 dfe:	9c e9       	ldi	r25, 0x9C	; 156
 e00:	01 97       	sbiw	r24, 0x01	; 1
 e02:	f1 f7       	brne	.-4      	; 0xe00 <SHT31_ReadTemperature+0x1e>
 e04:	00 c0       	rjmp	.+0      	; 0xe06 <SHT31_ReadTemperature+0x24>
 e06:	00 00       	nop
 e08:	0e 94 63 09 	call	0x12c6	; 0x12c6 <TWI_1_Start>
 e0c:	89 e8       	ldi	r24, 0x89	; 137
 e0e:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 e12:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_1_Read_nAck>
 e16:	90 e0       	ldi	r25, 0x00	; 0
 e18:	c9 2f       	mov	r28, r25
 e1a:	d8 2f       	mov	r29, r24
 e1c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_1_Read_nAck>
 e20:	c8 2b       	or	r28, r24
 e22:	0e 94 ae 0a 	call	0x155c	; 0x155c <TWI_1_Stop>
 e26:	be 01       	movw	r22, r28
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	90 e0       	ldi	r25, 0x00	; 0
 e2c:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 e30:	20 e0       	ldi	r18, 0x00	; 0
 e32:	30 e0       	ldi	r19, 0x00	; 0
 e34:	4f e2       	ldi	r20, 0x2F	; 47
 e36:	53 e4       	ldi	r21, 0x43	; 67
 e38:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
 e3c:	20 e0       	ldi	r18, 0x00	; 0
 e3e:	3f ef       	ldi	r19, 0xFF	; 255
 e40:	4f e7       	ldi	r20, 0x7F	; 127
 e42:	57 e4       	ldi	r21, 0x47	; 71
 e44:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divsf3>
 e48:	20 e0       	ldi	r18, 0x00	; 0
 e4a:	30 e0       	ldi	r19, 0x00	; 0
 e4c:	44 e3       	ldi	r20, 0x34	; 52
 e4e:	52 e4       	ldi	r21, 0x42	; 66
 e50:	0e 94 00 0b 	call	0x1600	; 0x1600 <__subsf3>
 e54:	df 91       	pop	r29
 e56:	cf 91       	pop	r28
 e58:	08 95       	ret

Disassembly of section .text.SHT31_ReadHumidity:

00000e5a <SHT31_ReadHumidity>:
 e5a:	cf 93       	push	r28
 e5c:	df 93       	push	r29
 e5e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <TWI_1_Start>
 e62:	88 e8       	ldi	r24, 0x88	; 136
 e64:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 e68:	84 e2       	ldi	r24, 0x24	; 36
 e6a:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 e6e:	80 e0       	ldi	r24, 0x00	; 0
 e70:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 e74:	8f e3       	ldi	r24, 0x3F	; 63
 e76:	9c e9       	ldi	r25, 0x9C	; 156
 e78:	01 97       	sbiw	r24, 0x01	; 1
 e7a:	f1 f7       	brne	.-4      	; 0xe78 <SHT31_ReadHumidity+0x1e>
 e7c:	00 c0       	rjmp	.+0      	; 0xe7e <SHT31_ReadHumidity+0x24>
 e7e:	00 00       	nop
 e80:	0e 94 63 09 	call	0x12c6	; 0x12c6 <TWI_1_Start>
 e84:	89 e8       	ldi	r24, 0x89	; 137
 e86:	0e 94 9c 09 	call	0x1338	; 0x1338 <TWI_1_Write>
 e8a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_1_Read_nAck>
 e8e:	90 e0       	ldi	r25, 0x00	; 0
 e90:	c9 2f       	mov	r28, r25
 e92:	d8 2f       	mov	r29, r24
 e94:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <TWI_1_Read_nAck>
 e98:	c8 2b       	or	r28, r24
 e9a:	0e 94 ae 0a 	call	0x155c	; 0x155c <TWI_1_Stop>
 e9e:	be 01       	movw	r22, r28
 ea0:	80 e0       	ldi	r24, 0x00	; 0
 ea2:	90 e0       	ldi	r25, 0x00	; 0
 ea4:	0e 94 b4 06 	call	0xd68	; 0xd68 <__floatunsisf>
 ea8:	20 e0       	ldi	r18, 0x00	; 0
 eaa:	30 e0       	ldi	r19, 0x00	; 0
 eac:	48 ec       	ldi	r20, 0xC8	; 200
 eae:	52 e4       	ldi	r21, 0x42	; 66
 eb0:	0e 94 33 0b 	call	0x1666	; 0x1666 <__mulsf3>
 eb4:	20 e0       	ldi	r18, 0x00	; 0
 eb6:	3f ef       	ldi	r19, 0xFF	; 255
 eb8:	4f e7       	ldi	r20, 0x7F	; 127
 eba:	57 e4       	ldi	r21, 0x47	; 71
 ebc:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divsf3>
 ec0:	df 91       	pop	r29
 ec2:	cf 91       	pop	r28
 ec4:	08 95       	ret

Disassembly of section .text.USART_0_Init:

00001418 <USART_0_Init>:
#include "MASTER_USART.h"

// Inicializacia USART_0 komunikacie:
void USART_0_Init(void){
// Nastavenie BAUD RATE:
	UBRR0H = (unsigned char)((F_CPU/16/BAUD)-1) >> 8;
    1418:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)((F_CPU/16/BAUD)-1);
    141c:	83 e3       	ldi	r24, 0x33	; 51
    141e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
// Enable RX receiver, TX transmitter and interrupt from RXC:
	UCSR0B |= (1<<RXEN);									// Povolenie prijimania.
    1422:	e1 ec       	ldi	r30, 0xC1	; 193
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	80 61       	ori	r24, 0x10	; 16
    142a:	80 83       	st	Z, r24
	UCSR0B |= (1<<TXEN);									// Povolenie vysielania.
    142c:	80 81       	ld	r24, Z
    142e:	88 60       	ori	r24, 0x08	; 8
    1430:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE);									// Povolenie prerusenia od prijimu.
    1432:	80 81       	ld	r24, Z
    1434:	80 68       	ori	r24, 0x80	; 128
    1436:	80 83       	st	Z, r24

	UCSR0C = (1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);				// Nastavenie frame formatu: 2stop bit, 8data bit
    1438:	8e e0       	ldi	r24, 0x0E	; 14
    143a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    143e:	08 95       	ret

Disassembly of section .text.USART_0_Transmit_char:

000015e4 <USART_0_Transmit_char>:
}

// Funkcia na odoslanie textoveho znaku (5 az 8 datoveho bitu) cez USART_0:
void USART_0_Transmit_char(unsigned char data){
	while (!(UCSR0A & (1<<UDRE)))							// Wait for empty transmit buffer.
    15e4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    15e8:	95 ff       	sbrs	r25, 5
    15ea:	fc cf       	rjmp	.-8      	; 0x15e4 <USART_0_Transmit_char>
		;
	
	UDR0 = data;											// Vlozenie dat do buffera, odoslanie dat.
    15ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    15f0:	08 95       	ret

Disassembly of section .text.USART_0_Transmit_string:

0000139a <USART_0_Transmit_string>:
}

// Funkcia na odoslanie textoveho retazca cez USART_0:
void USART_0_Transmit_string(const char* str){
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	6b 01       	movw	r12, r22
    13a2:	e8 2e       	mov	r14, r24
	while(*str){
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <USART_0_Transmit_string+0x18>
		USART_0_Transmit_char(*str++);
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	c9 1a       	sub	r12, r25
    13aa:	d9 0a       	sbc	r13, r25
    13ac:	e9 0a       	sbc	r14, r25
    13ae:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	UDR0 = data;											// Vlozenie dat do buffera, odoslanie dat.
}

// Funkcia na odoslanie textoveho retazca cez USART_0:
void USART_0_Transmit_string(const char* str){
	while(*str){
    13b2:	f6 01       	movw	r30, r12
    13b4:	84 91       	lpm	r24, Z
    13b6:	e7 fc       	sbrc	r14, 7
    13b8:	80 81       	ld	r24, Z
    13ba:	81 11       	cpse	r24, r1
    13bc:	f4 cf       	rjmp	.-24     	; 0x13a6 <USART_0_Transmit_string+0xc>
		USART_0_Transmit_char(*str++);
	}
}
    13be:	ef 90       	pop	r14
    13c0:	df 90       	pop	r13
    13c2:	cf 90       	pop	r12
    13c4:	08 95       	ret

Disassembly of section .text.USART_0_Transmit_number:

00000b88 <USART_0_Transmit_number>:

// Funkcia na odoslanie desiatkoveho cisla (len do troch cifier) cez USART_0:
void USART_0_Transmit_number(int num){
 b88:	ef 92       	push	r14
 b8a:	ff 92       	push	r15
 b8c:	0f 93       	push	r16
 b8e:	1f 93       	push	r17
 b90:	cf 93       	push	r28
 b92:	df 93       	push	r29
 b94:	ec 01       	movw	r28, r24
	if(num < 0){											// Prepocet zaporneho cisla na kladne cislo
 b96:	99 23       	and	r25, r25
 b98:	34 f4       	brge	.+12     	; 0xba6 <USART_0_Transmit_number+0x1e>
		USART_0_Transmit_char('-');							// Odoslanie zaporneho znamienka
 b9a:	8d e2       	ldi	r24, 0x2D	; 45
 b9c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
		num *= -1;
 ba0:	d1 95       	neg	r29
 ba2:	c1 95       	neg	r28
 ba4:	d1 09       	sbc	r29, r1
	}
	if(num >= 0 && num < 10){								// Jednociferne kladne cislo	[x]
 ba6:	ce 01       	movw	r24, r28
 ba8:	ca 30       	cpi	r28, 0x0A	; 10
 baa:	d1 05       	cpc	r29, r1
 bac:	20 f4       	brcc	.+8      	; 0xbb6 <USART_0_Transmit_number+0x2e>
		USART_0_Transmit_char(num + 0x30);
 bae:	80 5d       	subi	r24, 0xD0	; 208
 bb0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 bb4:	35 c0       	rjmp	.+106    	; 0xc20 <USART_0_Transmit_number+0x98>
	}else if(num >= 10 && num < 100){						// Dvojciferne kladne cislo		[xx]
 bb6:	9e 01       	movw	r18, r28
 bb8:	2a 50       	subi	r18, 0x0A	; 10
 bba:	31 09       	sbc	r19, r1
 bbc:	2a 35       	cpi	r18, 0x5A	; 90
 bbe:	31 05       	cpc	r19, r1
 bc0:	78 f4       	brcc	.+30     	; 0xbe0 <USART_0_Transmit_number+0x58>
		USART_0_Transmit_char((num / 10) + 0x30);
 bc2:	ce 01       	movw	r24, r28
 bc4:	6a e0       	ldi	r22, 0x0A	; 10
 bc6:	70 e0       	ldi	r23, 0x00	; 0
 bc8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 bcc:	c8 2f       	mov	r28, r24
 bce:	80 e3       	ldi	r24, 0x30	; 48
 bd0:	86 0f       	add	r24, r22
 bd2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
		USART_0_Transmit_char((num % 10) + 0x30);
 bd6:	80 e3       	ldi	r24, 0x30	; 48
 bd8:	8c 0f       	add	r24, r28
 bda:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 bde:	20 c0       	rjmp	.+64     	; 0xc20 <USART_0_Transmit_number+0x98>
	}else if(num >= 100 && num < 1000){						// Trojciferne kladne cislo		[xxx]
 be0:	84 56       	subi	r24, 0x64	; 100
 be2:	91 09       	sbc	r25, r1
 be4:	84 38       	cpi	r24, 0x84	; 132
 be6:	93 40       	sbci	r25, 0x03	; 3
 be8:	d8 f4       	brcc	.+54     	; 0xc20 <USART_0_Transmit_number+0x98>
		USART_0_Transmit_char((num / 100) + 0x30);
 bea:	ce 01       	movw	r24, r28
 bec:	64 e6       	ldi	r22, 0x64	; 100
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 bf4:	7c 01       	movw	r14, r24
 bf6:	80 e3       	ldi	r24, 0x30	; 48
 bf8:	86 0f       	add	r24, r22
 bfa:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
		USART_0_Transmit_char(((num % 100) / 10) + 0x30);
 bfe:	0a e0       	ldi	r16, 0x0A	; 10
 c00:	10 e0       	ldi	r17, 0x00	; 0
 c02:	c7 01       	movw	r24, r14
 c04:	b8 01       	movw	r22, r16
 c06:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 c0a:	80 e3       	ldi	r24, 0x30	; 48
 c0c:	86 0f       	add	r24, r22
 c0e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
		USART_0_Transmit_char((num % 10) + 0x30);
 c12:	ce 01       	movw	r24, r28
 c14:	b8 01       	movw	r22, r16
 c16:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 c1a:	80 5d       	subi	r24, 0xD0	; 208
 c1c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	}
}
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	08 95       	ret

Disassembly of section .text.USART_0_Flush:

000015d4 <USART_0_Flush>:

// Vyprazdnenie prijimanych udajov (Flushing the Receive Buffer):
void USART_0_Flush(void){
	uint8_t dummy;
	while(UCSR0A & (1<<RXC)){
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <USART_0_Flush+0x6>
		dummy = UDR0;
    15d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}

// Vyprazdnenie prijimanych udajov (Flushing the Receive Buffer):
void USART_0_Flush(void){
	uint8_t dummy;
	while(UCSR0A & (1<<RXC)){
    15da:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    15de:	88 23       	and	r24, r24
    15e0:	d4 f3       	brlt	.-12     	; 0x15d6 <USART_0_Flush+0x2>
		dummy = UDR0;
	}
	(void)dummy;											// Nepouzita premenna (osetrenie pre kompilator).
}
    15e2:	08 95       	ret

Disassembly of section .text.RTC_Master:

000005e4 <RTC_Master>:

// Funkcia na odoslanie datumu a casu do displeja:
void RTC_Master(void){
 5e4:	ef 92       	push	r14
 5e6:	ff 92       	push	r15
 5e8:	0f 93       	push	r16
 5ea:	1f 93       	push	r17
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
	// upravit
	if(LED1)LED1_ON;
 5f0:	4d 9b       	sbis	0x09, 5	; 9
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <RTC_Master+0x16>
 5f4:	8b b1       	in	r24, 0x0b	; 11
 5f6:	8f 7d       	andi	r24, 0xDF	; 223
 5f8:	8b b9       	out	0x0b, r24	; 11
	if(!LED0)LED0_OFF;
 5fa:	4c 99       	sbic	0x09, 4	; 9
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <RTC_Master+0x20>
 5fe:	8b b1       	in	r24, 0x0b	; 11
 600:	80 61       	ori	r24, 0x10	; 16
 602:	8b b9       	out	0x0b, r24	; 11
	
// Citanie dat zo zariadenia DS1307:
//	uint8_t seconds = DS1307_Read(0x00);					// Cas nieje pouzity v projekte.
	uint8_t minutes = DS1307_Read(0x01);
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 60a:	d8 2f       	mov	r29, r24
	uint8_t hours	= DS1307_Read(0x02);
 60c:	82 e0       	ldi	r24, 0x02	; 2
 60e:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 612:	18 2f       	mov	r17, r24
	uint8_t day_n	= DS1307_Read(0x03);
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 61a:	c8 2f       	mov	r28, r24
	uint8_t day		= DS1307_Read(0x04);
 61c:	84 e0       	ldi	r24, 0x04	; 4
 61e:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 622:	08 2f       	mov	r16, r24
	uint8_t month	= DS1307_Read(0x05);
 624:	85 e0       	ldi	r24, 0x05	; 5
 626:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 62a:	f8 2e       	mov	r15, r24
	uint8_t year	= DS1307_Read(0x06);
 62c:	86 e0       	ldi	r24, 0x06	; 6
 62e:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 632:	e8 2e       	mov	r14, r24
	
// Odoslanie dat do zariadenia NEXTION:
	USART_0_Transmit_string("yM=");							// year - rok z RTC Mastra
 634:	60 e5       	ldi	r22, 0x50	; 80
 636:	71 e0       	ldi	r23, 0x01	; 1
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(year));
 63e:	8e 2d       	mov	r24, r14
 640:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
	USART_0_Transmit_string("moM=");						// month - mesiac z RTC Mastra
 65c:	64 e5       	ldi	r22, 0x54	; 84
 65e:	71 e0       	ldi	r23, 0x01	; 1
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(month));
 666:	8f 2d       	mov	r24, r15
 668:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 672:	8f ef       	ldi	r24, 0xFF	; 255
 674:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 678:	8f ef       	ldi	r24, 0xFF	; 255
 67a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 67e:	8f ef       	ldi	r24, 0xFF	; 255
 680:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
	USART_0_Transmit_string("dM=");							// date/day - datum/den z RTC Mastra
 684:	69 e5       	ldi	r22, 0x59	; 89
 686:	71 e0       	ldi	r23, 0x01	; 1
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(day));
 68e:	80 2f       	mov	r24, r16
 690:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6a0:	8f ef       	ldi	r24, 0xFF	; 255
 6a2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
	USART_0_Transmit_string("hM=");							// hour - hodina z RTC Mastra
 6ac:	6d e5       	ldi	r22, 0x5D	; 93
 6ae:	71 e0       	ldi	r23, 0x01	; 1
 6b0:	80 e0       	ldi	r24, 0x00	; 0
 6b2:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(hours));
 6b6:	81 2f       	mov	r24, r17
 6b8:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
	USART_0_Transmit_string("miM=");						// minute - minuta z RTC Mastra
 6d4:	61 e6       	ldi	r22, 0x61	; 97
 6d6:	71 e0       	ldi	r23, 0x01	; 1
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(minutes));
 6de:	8d 2f       	mov	r24, r29
 6e0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 6ea:	8f ef       	ldi	r24, 0xFF	; 255
 6ec:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6f0:	8f ef       	ldi	r24, 0xFF	; 255
 6f2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 6f6:	8f ef       	ldi	r24, 0xFF	; 255
 6f8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
	USART_0_Transmit_string("dnM=");						// day number - den cislo (Po az Ne) z RTC Mastra
 6fc:	66 e6       	ldi	r22, 0x66	; 102
 6fe:	71 e0       	ldi	r23, 0x01	; 1
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(BCD_to_Decimal(day_n));
 706:	8c 2f       	mov	r24, r28
 708:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 718:	8f ef       	ldi	r24, 0xFF	; 255
 71a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 71e:	8f ef       	ldi	r24, 0xFF	; 255
 720:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 724:	8f e1       	ldi	r24, 0x1F	; 31
 726:	9e e4       	ldi	r25, 0x4E	; 78
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <RTC_Master+0x144>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <RTC_Master+0x14a>
 72e:	00 00       	nop

	_delay_ms(10);
	LED1_OFF;
 730:	8b b1       	in	r24, 0x0b	; 11
 732:	80 62       	ori	r24, 0x20	; 32
 734:	8b b9       	out	0x0b, r24	; 11
}
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	1f 91       	pop	r17
 73c:	0f 91       	pop	r16
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	08 95       	ret

Disassembly of section .text.TempRH_Master:

00000cd4 <TempRH_Master>:

// Funkcia na odoslanie vnutornej teploty a vlhkosti do displeja:
void TempRH_Master(void){
 cd4:	cf 92       	push	r12
 cd6:	df 92       	push	r13
 cd8:	ef 92       	push	r14
 cda:	ff 92       	push	r15
	if(LED1)LED1_ON;
 cdc:	4d 9b       	sbis	0x09, 5	; 9
 cde:	03 c0       	rjmp	.+6      	; 0xce6 <TempRH_Master+0x12>
 ce0:	8b b1       	in	r24, 0x0b	; 11
 ce2:	8f 7d       	andi	r24, 0xDF	; 223
 ce4:	8b b9       	out	0x0b, r24	; 11
	if(!LED0)LED0_OFF;
 ce6:	4c 99       	sbic	0x09, 4	; 9
 ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <TempRH_Master+0x1c>
 cea:	8b b1       	in	r24, 0x0b	; 11
 cec:	80 61       	ori	r24, 0x10	; 16
 cee:	8b b9       	out	0x0b, r24	; 11
	
// Odoslanie hodnoty teploty do zariadenia NEXTION:
	int temp = SHT31_ReadTemperature();
 cf0:	0e 94 f1 06 	call	0xde2	; 0xde2 <SHT31_ReadTemperature>
 cf4:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixsfsi>
 cf8:	6b 01       	movw	r12, r22
 cfa:	7c 01       	movw	r14, r24
	USART_0_Transmit_string("TinM=");						// TinM - temperature interior from Master
 cfc:	6b e6       	ldi	r22, 0x6B	; 107
 cfe:	71 e0       	ldi	r23, 0x01	; 1
 d00:	80 e0       	ldi	r24, 0x00	; 0
 d02:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(temp);
 d06:	c6 01       	movw	r24, r12
 d08:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 d0c:	8f ef       	ldi	r24, 0xFF	; 255
 d0e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 d12:	8f ef       	ldi	r24, 0xFF	; 255
 d14:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 d18:	8f ef       	ldi	r24, 0xFF	; 255
 d1a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	
// Odoslanie hodnoty vlhkosti do zariadenia NEXTION:
	int hum = SHT31_ReadHumidity();
 d1e:	0e 94 2d 07 	call	0xe5a	; 0xe5a <SHT31_ReadHumidity>
 d22:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixsfsi>
 d26:	6b 01       	movw	r12, r22
 d28:	7c 01       	movw	r14, r24
	USART_0_Transmit_string("RhM=");						// RhM - relative humidity from Master
 d2a:	61 e7       	ldi	r22, 0x71	; 113
 d2c:	71 e0       	ldi	r23, 0x01	; 1
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(hum);
 d34:	c6 01       	movw	r24, r12
 d36:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
 d3a:	8f ef       	ldi	r24, 0xFF	; 255
 d3c:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
 d46:	8f ef       	ldi	r24, 0xFF	; 255
 d48:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
 d4c:	8f e1       	ldi	r24, 0x1F	; 31
 d4e:	9e e4       	ldi	r25, 0x4E	; 78
 d50:	01 97       	sbiw	r24, 0x01	; 1
 d52:	f1 f7       	brne	.-4      	; 0xd50 <TempRH_Master+0x7c>
 d54:	00 c0       	rjmp	.+0      	; 0xd56 <TempRH_Master+0x82>
 d56:	00 00       	nop
	
	_delay_ms(10);
	LED1_OFF;
 d58:	8b b1       	in	r24, 0x0b	; 11
 d5a:	80 62       	ori	r24, 0x20	; 32
 d5c:	8b b9       	out	0x0b, r24	; 11
}
 d5e:	ff 90       	pop	r15
 d60:	ef 90       	pop	r14
 d62:	df 90       	pop	r13
 d64:	cf 90       	pop	r12
 d66:	08 95       	ret

Disassembly of section .text.TempWind_Outdoor:

000011ba <TempWind_Outdoor>:
	// *** Doplnit snimanie teploty a vetra z vonkajsieho prostredia *** //
	int temp = 25;											// !!! fiktivna premenna vonkajsej teploty	!!!
	int wind = 51;											// !!! fiktivna premenna rychlosti vetra	!!!

// Odoslanie hodnoty vonkajsej teploty do zariadenia NEXTION:
	USART_0_Transmit_string("Tout=");						// RhM - relative humidity from Master
    11ba:	66 e7       	ldi	r22, 0x76	; 118
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(temp);
    11c4:	89 e1       	ldi	r24, 0x19	; 25
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
    11cc:	8f ef       	ldi	r24, 0xFF	; 255
    11ce:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
    11d2:	8f ef       	ldi	r24, 0xFF	; 255
    11d4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
    11d8:	8f ef       	ldi	r24, 0xFF	; 255
    11da:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>

// Odoslanie hodnoty rychlosti vetra do zariadenia NEXTION:	
	USART_0_Transmit_string("Wind=");						// Wind - speed of wind from Master
    11de:	6c e7       	ldi	r22, 0x7C	; 124
    11e0:	71 e0       	ldi	r23, 0x01	; 1
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 cd 09 	call	0x139a	; 0x139a <USART_0_Transmit_string>
	USART_0_Transmit_number(wind);
    11e8:	83 e3       	ldi	r24, 0x33	; 51
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_0_Transmit_number>
	USART_0_Transmit_char(0xFF);
    11f0:	8f ef       	ldi	r24, 0xFF	; 255
    11f2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
    11f6:	8f ef       	ldi	r24, 0xFF	; 255
    11f8:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
	USART_0_Transmit_char(0xFF);
    11fc:	8f ef       	ldi	r24, 0xFF	; 255
    11fe:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <USART_0_Transmit_char>
    1202:	08 95       	ret

Disassembly of section .text.USART_1_Init:

0000157c <USART_1_Init>:

// **************************** SLAVE devices **************************** //
// Inicializacia USART_1 komunikacie:
void USART_1_Init(void){
	// Nastavenie BAUD RATE:
	UBRR1H = (unsigned char)((F_CPU/16/BAUD)-1) >> 8;
    157c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = (unsigned char)((F_CPU/16/BAUD)-1);
    1580:	83 e3       	ldi	r24, 0x33	; 51
    1582:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	
	// Enable RX receiver, TX transmitter and interrupt from RXC:
	//	UCSR1B |= (1<<RXEN);								// Povolenie prijimania.
	UCSR1B |= (1<<TXEN);									// Povolenie vysielania.
    1586:	e9 ec       	ldi	r30, 0xC9	; 201
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	88 60       	ori	r24, 0x08	; 8
    158e:	80 83       	st	Z, r24
	//	UCSR1B |= (1<<RXCIE);								// Povolenie prerusenia od prijimu.

	UCSR1C = (1<<USBS)|(1<<UCSZ1)|(1<<UCSZ0);				// Nastavenie frame formatu: 2stop bit, 8data bit
    1590:	8e e0       	ldi	r24, 0x0E	; 14
    1592:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
    1596:	08 95       	ret

Disassembly of section .text.USART_1_Transmit_char:

000015f2 <USART_1_Transmit_char>:
}

// Funkcia na odoslanie textoveho znaku (5 az 8 datoveho bitu) cez USART_1:
void USART_1_Transmit_char(unsigned char data){
	while (!(UCSR1A & (1<<UDRE)))							// Wait for empty transmit buffer.
    15f2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
    15f6:	95 ff       	sbrs	r25, 5
    15f8:	fc cf       	rjmp	.-8      	; 0x15f2 <USART_1_Transmit_char>
	;

	UDR1 = data;											// Vlozenie dat do buffera, odoslanie dat.
    15fa:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
    15fe:	08 95       	ret

Disassembly of section .text.USART_1_Transmit_number:

00000c2e <USART_1_Transmit_number>:
}

// Funkcia na odoslanie desiatkoveho cisla (len do troch cifier) cez USART_1:
void USART_1_Transmit_number(int num){
 c2e:	ef 92       	push	r14
 c30:	ff 92       	push	r15
 c32:	0f 93       	push	r16
 c34:	1f 93       	push	r17
 c36:	cf 93       	push	r28
 c38:	df 93       	push	r29
 c3a:	ec 01       	movw	r28, r24
	if(num < 0){											// Prepocet zaporneho cisla na kladne cislo
 c3c:	99 23       	and	r25, r25
 c3e:	34 f4       	brge	.+12     	; 0xc4c <USART_1_Transmit_number+0x1e>
		USART_1_Transmit_char('-');							// Odoslanie zaporneho znamienka
 c40:	8d e2       	ldi	r24, 0x2D	; 45
 c42:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
		num *= -1;
 c46:	d1 95       	neg	r29
 c48:	c1 95       	neg	r28
 c4a:	d1 09       	sbc	r29, r1
	}
	if(num >= 0 && num < 10){								// Jednociferne kladne cislo	[x]
 c4c:	ce 01       	movw	r24, r28
 c4e:	ca 30       	cpi	r28, 0x0A	; 10
 c50:	d1 05       	cpc	r29, r1
 c52:	20 f4       	brcc	.+8      	; 0xc5c <USART_1_Transmit_number+0x2e>
		USART_1_Transmit_char(num + 0x30);
 c54:	80 5d       	subi	r24, 0xD0	; 208
 c56:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
 c5a:	35 c0       	rjmp	.+106    	; 0xcc6 <USART_1_Transmit_number+0x98>
	}else if(num >= 10 && num < 100){						// Dvojciferne kladne cislo		[xx]
 c5c:	9e 01       	movw	r18, r28
 c5e:	2a 50       	subi	r18, 0x0A	; 10
 c60:	31 09       	sbc	r19, r1
 c62:	2a 35       	cpi	r18, 0x5A	; 90
 c64:	31 05       	cpc	r19, r1
 c66:	78 f4       	brcc	.+30     	; 0xc86 <USART_1_Transmit_number+0x58>
		USART_1_Transmit_char((num / 10) + 0x30);
 c68:	ce 01       	movw	r24, r28
 c6a:	6a e0       	ldi	r22, 0x0A	; 10
 c6c:	70 e0       	ldi	r23, 0x00	; 0
 c6e:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 c72:	c8 2f       	mov	r28, r24
 c74:	80 e3       	ldi	r24, 0x30	; 48
 c76:	86 0f       	add	r24, r22
 c78:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
		USART_1_Transmit_char((num % 10) + 0x30);
 c7c:	80 e3       	ldi	r24, 0x30	; 48
 c7e:	8c 0f       	add	r24, r28
 c80:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
 c84:	20 c0       	rjmp	.+64     	; 0xcc6 <USART_1_Transmit_number+0x98>
	}else if(num >= 100 && num < 1000){						// Trojciferne kladne cislo		[xxx]
 c86:	84 56       	subi	r24, 0x64	; 100
 c88:	91 09       	sbc	r25, r1
 c8a:	84 38       	cpi	r24, 0x84	; 132
 c8c:	93 40       	sbci	r25, 0x03	; 3
 c8e:	d8 f4       	brcc	.+54     	; 0xcc6 <USART_1_Transmit_number+0x98>
		USART_1_Transmit_char((num / 100) + 0x30);
 c90:	ce 01       	movw	r24, r28
 c92:	64 e6       	ldi	r22, 0x64	; 100
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 c9a:	7c 01       	movw	r14, r24
 c9c:	80 e3       	ldi	r24, 0x30	; 48
 c9e:	86 0f       	add	r24, r22
 ca0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
		USART_1_Transmit_char(((num % 100) / 10) + 0x30);
 ca4:	0a e0       	ldi	r16, 0x0A	; 10
 ca6:	10 e0       	ldi	r17, 0x00	; 0
 ca8:	c7 01       	movw	r24, r14
 caa:	b8 01       	movw	r22, r16
 cac:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 cb0:	80 e3       	ldi	r24, 0x30	; 48
 cb2:	86 0f       	add	r24, r22
 cb4:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
		USART_1_Transmit_char((num % 10) + 0x30);
 cb8:	ce 01       	movw	r24, r28
 cba:	b8 01       	movw	r22, r16
 cbc:	0e 94 20 0a 	call	0x1440	; 0x1440 <__divmodhi4>
 cc0:	80 5d       	subi	r24, 0xD0	; 208
 cc2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <USART_1_Transmit_char>
	}
}
 cc6:	df 91       	pop	r29
 cc8:	cf 91       	pop	r28
 cca:	1f 91       	pop	r17
 ccc:	0f 91       	pop	r16
 cce:	ff 90       	pop	r15
 cd0:	ef 90       	pop	r14
 cd2:	08 95       	ret

Disassembly of section .text.ActualDataforSlave:

00000f9e <ActualDataforSlave>:

// Funkcia na odoslanie teploty, vetra a osvetlenia do SLAVE zariadeni:
void ActualDataforSlave(void){
 f9e:	cf 92       	push	r12
 fa0:	df 92       	push	r13
 fa2:	ef 92       	push	r14
 fa4:	ff 92       	push	r15
 fa6:	cf 93       	push	r28
 fa8:	df 93       	push	r29
	int temp_in = SHT31_ReadTemperature();					// Citanie teploty zo zariadenia SHT31.
 faa:	0e 94 f1 06 	call	0xde2	; 0xde2 <SHT31_ReadTemperature>
 fae:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixsfsi>
 fb2:	6b 01       	movw	r12, r22
 fb4:	7c 01       	movw	r14, r24
	int temp_out = 25;										// !!! fiktivna premenna vonkajsej teploty			!!!
	int wind = 51;											// !!! fiktivna premenna rychlosti vetra			!!!
	int lighting_S = 0;										// !!! fiktivna premenna osvetlenia juh (south)		!!!
	int lighting_W = 0;										// !!! fiktivna premenna osvetlenia zapad (west)	!!!

	int checksum = 0xB0 + temp_in + temp_out + wind + lighting_S + lighting_W;
 fb6:	eb 01       	movw	r28, r22
 fb8:	c4 50       	subi	r28, 0x04	; 4
 fba:	df 4f       	sbci	r29, 0xFF	; 255
	
// Odoslanie dat do SLAVE zariadeni:
	USART_1_Transmit_number(0xB0);							// Kod povelu 0xB0 - Informacia pre vsetky SLAVE zariadenia.
 fbc:	80 eb       	ldi	r24, 0xB0	; 176
 fbe:	90 e0       	ldi	r25, 0x00	; 0
 fc0:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(temp_in);						// Odoslanie hodnoty teploty.
 fc4:	c6 01       	movw	r24, r12
 fc6:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(temp_out);						// Odoslanie hodnoty teploty exterieru.
 fca:	89 e1       	ldi	r24, 0x19	; 25
 fcc:	90 e0       	ldi	r25, 0x00	; 0
 fce:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(wind);							// Odoslanie hodnoty teploty exterieru.
 fd2:	83 e3       	ldi	r24, 0x33	; 51
 fd4:	90 e0       	ldi	r25, 0x00	; 0
 fd6:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(lighting_S);					// Odoslanie hodnoty osvetlenia juh.
 fda:	80 e0       	ldi	r24, 0x00	; 0
 fdc:	90 e0       	ldi	r25, 0x00	; 0
 fde:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(lighting_W);					// Odoslanie hodnoty osvetlenia zapad.
 fe2:	80 e0       	ldi	r24, 0x00	; 0
 fe4:	90 e0       	ldi	r25, 0x00	; 0
 fe6:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);						// Odoslanie hodnoty checksum.
 fea:	ce 01       	movw	r24, r28
 fec:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
}
 ff0:	df 91       	pop	r29
 ff2:	cf 91       	pop	r28
 ff4:	ff 90       	pop	r15
 ff6:	ef 90       	pop	r14
 ff8:	df 90       	pop	r13
 ffa:	cf 90       	pop	r12
 ffc:	08 95       	ret

Disassembly of section .text.Master_A1:

00000ec6 <Master_A1>:

// Prikaz 0xA1 (priame zadanie nastavenie zaluzii), pre SLAVE:
void Master_A1(unsigned char zal_id, unsigned char pozicia, unsigned char natocenie){
 ec6:	cf 92       	push	r12
 ec8:	df 92       	push	r13
 eca:	ef 92       	push	r14
 ecc:	ff 92       	push	r15
 ece:	0f 93       	push	r16
 ed0:	1f 93       	push	r17
 ed2:	cf 93       	push	r28
 ed4:	df 93       	push	r29
	int checksum = 0xB1 + zal_id + pozicia + natocenie;
 ed6:	e8 2e       	mov	r14, r24
 ed8:	f1 2c       	mov	r15, r1
 eda:	e7 01       	movw	r28, r14
 edc:	cf 54       	subi	r28, 0x4F	; 79
 ede:	df 4f       	sbci	r29, 0xFF	; 255
 ee0:	06 2f       	mov	r16, r22
 ee2:	10 e0       	ldi	r17, 0x00	; 0
 ee4:	c0 0f       	add	r28, r16
 ee6:	d1 1f       	adc	r29, r17
 ee8:	c4 2e       	mov	r12, r20
 eea:	d1 2c       	mov	r13, r1
 eec:	cc 0d       	add	r28, r12
 eee:	dd 1d       	adc	r29, r13

	USART_1_Transmit_number(0xB1);							// kod povelu 0xB1
 ef0:	81 eb       	ldi	r24, 0xB1	; 177
 ef2:	90 e0       	ldi	r25, 0x00	; 0
 ef4:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(zal_id);						// odoslanie ID zaluzii
 ef8:	c7 01       	movw	r24, r14
 efa:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(pozicia);						// odoslanie hodnoty pozicie
 efe:	c8 01       	movw	r24, r16
 f00:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(natocenie);						// odoslanie hodnoty natocenia
 f04:	c6 01       	movw	r24, r12
 f06:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
 f0a:	80 e0       	ldi	r24, 0x00	; 0
 f0c:	90 e0       	ldi	r25, 0x00	; 0
 f0e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
 f12:	80 e0       	ldi	r24, 0x00	; 0
 f14:	90 e0       	ldi	r25, 0x00	; 0
 f16:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);						// Odoslanie hodnoty checksum.			
 f1a:	ce 01       	movw	r24, r28
 f1c:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
}
 f20:	df 91       	pop	r29
 f22:	cf 91       	pop	r28
 f24:	1f 91       	pop	r17
 f26:	0f 91       	pop	r16
 f28:	ff 90       	pop	r15
 f2a:	ef 90       	pop	r14
 f2c:	df 90       	pop	r13
 f2e:	cf 90       	pop	r12
 f30:	08 95       	ret

Disassembly of section .text.Master_A3:

00000ffe <Master_A3>:

// Prikaz 0xA3 (Prirad maximalnej pozicie pre zaluzie), pre SLAVE:
void Master_A3(unsigned char zal_id, unsigned char pozicia){
     ffe:	ef 92       	push	r14
    1000:	ff 92       	push	r15
    1002:	0f 93       	push	r16
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
	int checksum = 0xB3 + zal_id + pozicia;
    100a:	08 2f       	mov	r16, r24
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	78 01       	movw	r14, r16
    1010:	83 eb       	ldi	r24, 0xB3	; 179
    1012:	e8 0e       	add	r14, r24
    1014:	f1 1c       	adc	r15, r1
    1016:	c6 2f       	mov	r28, r22
    1018:	d0 e0       	ldi	r29, 0x00	; 0
    101a:	ec 0e       	add	r14, r28
    101c:	fd 1e       	adc	r15, r29

	USART_1_Transmit_number(0xB3);								// kod povelu 0xB3
    101e:	83 eb       	ldi	r24, 0xB3	; 179
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(zal_id);							// odoslanie ID zaluzii
    1026:	c8 01       	movw	r24, r16
    1028:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(pozicia);							// odoslanie hodnoty pozicie
    102c:	ce 01       	movw	r24, r28
    102e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    1042:	80 e0       	ldi	r24, 0x00	; 0
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);							// Odoslanie hodnoty checksum.
    104a:	c7 01       	movw	r24, r14
    104c:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	0f 91       	pop	r16
    1058:	ff 90       	pop	r15
    105a:	ef 90       	pop	r14
    105c:	08 95       	ret

Disassembly of section .text.Master_A5:

00000f32 <Master_A5>:

// Prikaz 0xA5 (Prirad doby pre lokalnu dobu a Master dobu), pre SLAVE:
void Master_A5(unsigned char zal_id, unsigned char min_L, unsigned char min_M){
 f32:	cf 92       	push	r12
 f34:	df 92       	push	r13
 f36:	ef 92       	push	r14
 f38:	ff 92       	push	r15
 f3a:	0f 93       	push	r16
 f3c:	1f 93       	push	r17
 f3e:	cf 93       	push	r28
 f40:	df 93       	push	r29
	int checksum = 0xB5 + zal_id + min_L + min_M;
 f42:	e8 2e       	mov	r14, r24
 f44:	f1 2c       	mov	r15, r1
 f46:	e7 01       	movw	r28, r14
 f48:	cb 54       	subi	r28, 0x4B	; 75
 f4a:	df 4f       	sbci	r29, 0xFF	; 255
 f4c:	06 2f       	mov	r16, r22
 f4e:	10 e0       	ldi	r17, 0x00	; 0
 f50:	c0 0f       	add	r28, r16
 f52:	d1 1f       	adc	r29, r17
 f54:	c4 2e       	mov	r12, r20
 f56:	d1 2c       	mov	r13, r1
 f58:	cc 0d       	add	r28, r12
 f5a:	dd 1d       	adc	r29, r13

	USART_1_Transmit_number(0xB5);								// kod povelu 0xB5
 f5c:	85 eb       	ldi	r24, 0xB5	; 181
 f5e:	90 e0       	ldi	r25, 0x00	; 0
 f60:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(zal_id);							// odoslanie ID zaluzii
 f64:	c7 01       	movw	r24, r14
 f66:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(min_L);								// odoslanie hodnoty lokalnej doby
 f6a:	c8 01       	movw	r24, r16
 f6c:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(min_M);								// odoslanie hodnoty master doby
 f70:	c6 01       	movw	r24, r12
 f72:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
 f76:	80 e0       	ldi	r24, 0x00	; 0
 f78:	90 e0       	ldi	r25, 0x00	; 0
 f7a:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
 f7e:	80 e0       	ldi	r24, 0x00	; 0
 f80:	90 e0       	ldi	r25, 0x00	; 0
 f82:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);							// Odoslanie hodnoty checksum.
 f86:	ce 01       	movw	r24, r28
 f88:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
}
 f8c:	df 91       	pop	r29
 f8e:	cf 91       	pop	r28
 f90:	1f 91       	pop	r17
 f92:	0f 91       	pop	r16
 f94:	ff 90       	pop	r15
 f96:	ef 90       	pop	r14
 f98:	df 90       	pop	r13
 f9a:	cf 90       	pop	r12
 f9c:	08 95       	ret

Disassembly of section .text.Master_Alarm:

00000744 <Master_Alarm>:

// Prikaz 0xA6 (Aktivny/Neaktivny budik), pre SLAVE:
void Master_Alarm(uint8_t bud_min, uint8_t bud_hod, unsigned char bud_nat, unsigned char bud_poz, unsigned char bud_zal_id, uint8_t bud_dni){
 744:	8f 92       	push	r8
 746:	9f 92       	push	r9
 748:	af 92       	push	r10
 74a:	bf 92       	push	r11
 74c:	cf 92       	push	r12
 74e:	df 92       	push	r13
 750:	ef 92       	push	r14
 752:	ff 92       	push	r15
 754:	0f 93       	push	r16
 756:	1f 93       	push	r17
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	18 2f       	mov	r17, r24
 75e:	c6 2f       	mov	r28, r22
 760:	84 2e       	mov	r8, r20
 762:	c2 2e       	mov	r12, r18
	if(LED1)LED1_ON;
 764:	4d 9b       	sbis	0x09, 5	; 9
 766:	03 c0       	rjmp	.+6      	; 0x76e <Master_Alarm+0x2a>
 768:	8b b1       	in	r24, 0x0b	; 11
 76a:	8f 7d       	andi	r24, 0xDF	; 223
 76c:	8b b9       	out	0x0b, r24	; 11
	if(!LED0)LED0_OFF;
 76e:	4c 99       	sbic	0x09, 4	; 9
 770:	03 c0       	rjmp	.+6      	; 0x778 <Master_Alarm+0x34>
 772:	8b b1       	in	r24, 0x0b	; 11
 774:	80 61       	ori	r24, 0x10	; 16
 776:	8b b9       	out	0x0b, r24	; 11
	
	uint8_t minutes = BCD_to_Decimal(DS1307_Read(0x01));
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 77e:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 782:	d8 2e       	mov	r13, r24
	uint8_t hours	= BCD_to_Decimal(DS1307_Read(0x02));
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 78a:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 78e:	d8 2f       	mov	r29, r24
	uint8_t day_n	= BCD_to_Decimal(DS1307_Read(0x03));
 790:	83 e0       	ldi	r24, 0x03	; 3
 792:	0e 94 b6 09 	call	0x136c	; 0x136c <DS1307_Read>
 796:	0e 94 cc 0a 	call	0x1598	; 0x1598 <BCD_to_Decimal>
 79a:	f8 2e       	mov	r15, r24
	
	if(bud_hod == hours && bud_min == minutes){					// ak je aktivny budik a zaroven cas je aktualny pre budik
 79c:	dc 13       	cpse	r29, r28
 79e:	46 c0       	rjmp	.+140    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 7a0:	d1 12       	cpse	r13, r17
 7a2:	44 c0       	rjmp	.+136    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
		int checksum = 0xB6 + bud_nat + bud_poz + bud_zal_id;
 7a4:	91 2c       	mov	r9, r1
 7a6:	54 01       	movw	r10, r8
 7a8:	26 eb       	ldi	r18, 0xB6	; 182
 7aa:	a2 0e       	add	r10, r18
 7ac:	b1 1c       	adc	r11, r1
 7ae:	d1 2c       	mov	r13, r1
 7b0:	ac 0c       	add	r10, r12
 7b2:	bd 1c       	adc	r11, r13
 7b4:	10 e0       	ldi	r17, 0x00	; 0
 7b6:	a0 0e       	add	r10, r16
 7b8:	b1 1e       	adc	r11, r17
		
		for(int i = 0; i < 7; i++){								// binarne citanie, Po -> Ne:
 7ba:	c0 e0       	ldi	r28, 0x00	; 0
 7bc:	d0 e0       	ldi	r29, 0x00	; 0
 7be:	33 c0       	rjmp	.+102    	; 0x826 <__DATA_REGION_LENGTH__+0x26>
			if(bud_dni & (1 << i) && (i + 1) == day_n){			// kontrola dna budika podla RTC dna
 7c0:	8e 2d       	mov	r24, r14
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0c 2e       	mov	r0, r28
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <Master_Alarm+0x88>
 7c8:	95 95       	asr	r25
 7ca:	87 95       	ror	r24
 7cc:	0a 94       	dec	r0
 7ce:	e2 f7       	brpl	.-8      	; 0x7c8 <Master_Alarm+0x84>
 7d0:	80 ff       	sbrs	r24, 0
 7d2:	1f c0       	rjmp	.+62     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7d4:	2f 2d       	mov	r18, r15
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	ce 01       	movw	r24, r28
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	82 17       	cp	r24, r18
 7de:	93 07       	cpc	r25, r19
 7e0:	c1 f4       	brne	.+48     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
				USART_1_Transmit_number(0xB6);					// kod povelu 0xB6
 7e2:	86 eb       	ldi	r24, 0xB6	; 182
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(bud_nat);				// odoslanie hodnoty natocenia
 7ea:	c4 01       	movw	r24, r8
 7ec:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(bud_poz);				// odoslanie hodnoty pozicie
 7f0:	c6 01       	movw	r24, r12
 7f2:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(bud_zal_id);			// odoslanie ID zaluzii
 7f6:	c8 01       	movw	r24, r16
 7f8:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(0x00);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(0x00);
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
				USART_1_Transmit_number(checksum);				// Odoslanie hodnoty checksum.
 80c:	c5 01       	movw	r24, r10
 80e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
 812:	8f ef       	ldi	r24, 0xFF	; 255
 814:	90 e7       	ldi	r25, 0x70	; 112
 816:	22 e0       	ldi	r18, 0x02	; 2
 818:	81 50       	subi	r24, 0x01	; 1
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	20 40       	sbci	r18, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 822:	00 00       	nop
	uint8_t day_n	= BCD_to_Decimal(DS1307_Read(0x03));
	
	if(bud_hod == hours && bud_min == minutes){					// ak je aktivny budik a zaroven cas je aktualny pre budik
		int checksum = 0xB6 + bud_nat + bud_poz + bud_zal_id;
		
		for(int i = 0; i < 7; i++){								// binarne citanie, Po -> Ne:
 824:	21 96       	adiw	r28, 0x01	; 1
 826:	c7 30       	cpi	r28, 0x07	; 7
 828:	d1 05       	cpc	r29, r1
 82a:	54 f2       	brlt	.-108    	; 0x7c0 <Master_Alarm+0x7c>
 82c:	8f e1       	ldi	r24, 0x1F	; 31
 82e:	9e e4       	ldi	r25, 0x4E	; 78
 830:	01 97       	sbiw	r24, 0x01	; 1
 832:	f1 f7       	brne	.-4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 834:	00 c0       	rjmp	.+0      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 836:	00 00       	nop
			}
			_delay_ms(100);
		}
	}
	_delay_ms(10);
	LED1_OFF;
 838:	8b b1       	in	r24, 0x0b	; 11
 83a:	80 62       	ori	r24, 0x20	; 32
 83c:	8b b9       	out	0x0b, r24	; 11
}
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
 84a:	df 90       	pop	r13
 84c:	cf 90       	pop	r12
 84e:	bf 90       	pop	r11
 850:	af 90       	pop	r10
 852:	9f 90       	pop	r9
 854:	8f 90       	pop	r8
 856:	08 95       	ret

Disassembly of section .text.Master_A7:

0000105e <Master_A7>:

// Prikaz 0xA7 (Umyvanie okien),pre SLAVE:
void Master_A7(unsigned char umyva_zal_id, unsigned char umyva_on_off){
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
	int checksum = 0xB7 + umyva_zal_id + umyva_on_off;
    106a:	08 2f       	mov	r16, r24
    106c:	10 e0       	ldi	r17, 0x00	; 0
    106e:	78 01       	movw	r14, r16
    1070:	87 eb       	ldi	r24, 0xB7	; 183
    1072:	e8 0e       	add	r14, r24
    1074:	f1 1c       	adc	r15, r1
    1076:	c6 2f       	mov	r28, r22
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	ec 0e       	add	r14, r28
    107c:	fd 1e       	adc	r15, r29
	USART_1_Transmit_number(0xB7);								// kod povelu 0xB7
    107e:	87 eb       	ldi	r24, 0xB7	; 183
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(umyva_zal_id);						// odoslanie ID zaluzii
    1086:	c8 01       	movw	r24, r16
    1088:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(umyva_on_off);						// odoslanie hodnoty 1/0 umyvanie
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);							// Odoslanie hodnoty checksum.
    10aa:	c7 01       	movw	r24, r14
    10ac:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

Disassembly of section .text.Master_A8:

0000111c <Master_A8>:

// Prikaz 0xA8 (Zrusenie manualneho rezimu),pre SLAVE:
void Master_A8(unsigned char manual_off){
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
	int checksum = 0xB8 + manual_off;
    1124:	c8 2f       	mov	r28, r24
    1126:	d0 e0       	ldi	r29, 0x00	; 0
    1128:	8e 01       	movw	r16, r28
    112a:	08 54       	subi	r16, 0x48	; 72
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
	USART_1_Transmit_number(0xB8);								// kod povelu 0xB8
    112e:	88 eb       	ldi	r24, 0xB8	; 184
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(manual_off);						// odoslanie hodnoty vypnutia manualneho rezumu (0xFF z dipleja prikaz)
    1136:	ce 01       	movw	r24, r28
    1138:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(0x00);
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
	USART_1_Transmit_number(checksum);							// Odoslanie hodnoty checksum.
    115c:	c8 01       	movw	r24, r16
    115e:	0e 94 17 06 	call	0xc2e	; 0xc2e <USART_1_Transmit_number>
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	08 95       	ret

Disassembly of section .text:

00001600 <__subsf3>:
    1600:	50 58       	subi	r21, 0x80	; 128

00001602 <__addsf3>:
    1602:	bb 27       	eor	r27, r27
    1604:	aa 27       	eor	r26, r26
    1606:	0e 94 05 05 	call	0xa0a	; 0xa0a <__addsf3x>
    160a:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

Disassembly of section .text:

00000a0a <__addsf3x>:
 a0a:	11 c0       	rjmp	.+34     	; 0xa2e <__addsf3x+0x24>
 a0c:	0e 94 0e 0b 	call	0x161c	; 0x161c <__fp_pscA>
 a10:	38 f0       	brcs	.+14     	; 0xa20 <__addsf3x+0x16>
 a12:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_pscB>
 a16:	20 f0       	brcs	.+8      	; 0xa20 <__addsf3x+0x16>
 a18:	39 f4       	brne	.+14     	; 0xa28 <__addsf3x+0x1e>
 a1a:	9f 3f       	cpi	r25, 0xFF	; 255
 a1c:	19 f4       	brne	.+6      	; 0xa24 <__addsf3x+0x1a>
 a1e:	26 f4       	brtc	.+8      	; 0xa28 <__addsf3x+0x1e>
 a20:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
 a24:	0e f4       	brtc	.+2      	; 0xa28 <__addsf3x+0x1e>
 a26:	e0 95       	com	r30
 a28:	e7 fb       	bst	r30, 7
 a2a:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_inf>
 a2e:	e9 2f       	mov	r30, r25
 a30:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_split3>
 a34:	58 f3       	brcs	.-42     	; 0xa0c <__addsf3x+0x2>
 a36:	ba 17       	cp	r27, r26
 a38:	62 07       	cpc	r22, r18
 a3a:	73 07       	cpc	r23, r19
 a3c:	84 07       	cpc	r24, r20
 a3e:	95 07       	cpc	r25, r21
 a40:	20 f0       	brcs	.+8      	; 0xa4a <__addsf3x+0x40>
 a42:	79 f4       	brne	.+30     	; 0xa62 <__addsf3x+0x58>
 a44:	a6 f5       	brtc	.+104    	; 0xaae <__addsf3x+0xa4>
 a46:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_zero>
 a4a:	0e f4       	brtc	.+2      	; 0xa4e <__addsf3x+0x44>
 a4c:	e0 95       	com	r30
 a4e:	0b 2e       	mov	r0, r27
 a50:	ba 2f       	mov	r27, r26
 a52:	a0 2d       	mov	r26, r0
 a54:	0b 01       	movw	r0, r22
 a56:	b9 01       	movw	r22, r18
 a58:	90 01       	movw	r18, r0
 a5a:	0c 01       	movw	r0, r24
 a5c:	ca 01       	movw	r24, r20
 a5e:	a0 01       	movw	r20, r0
 a60:	11 24       	eor	r1, r1
 a62:	ff 27       	eor	r31, r31
 a64:	59 1b       	sub	r21, r25
 a66:	99 f0       	breq	.+38     	; 0xa8e <__addsf3x+0x84>
 a68:	59 3f       	cpi	r21, 0xF9	; 249
 a6a:	50 f4       	brcc	.+20     	; 0xa80 <__addsf3x+0x76>
 a6c:	50 3e       	cpi	r21, 0xE0	; 224
 a6e:	68 f1       	brcs	.+90     	; 0xaca <__addsf3x+0xc0>
 a70:	1a 16       	cp	r1, r26
 a72:	f0 40       	sbci	r31, 0x00	; 0
 a74:	a2 2f       	mov	r26, r18
 a76:	23 2f       	mov	r18, r19
 a78:	34 2f       	mov	r19, r20
 a7a:	44 27       	eor	r20, r20
 a7c:	58 5f       	subi	r21, 0xF8	; 248
 a7e:	f3 cf       	rjmp	.-26     	; 0xa66 <__addsf3x+0x5c>
 a80:	46 95       	lsr	r20
 a82:	37 95       	ror	r19
 a84:	27 95       	ror	r18
 a86:	a7 95       	ror	r26
 a88:	f0 40       	sbci	r31, 0x00	; 0
 a8a:	53 95       	inc	r21
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__addsf3x+0x76>
 a8e:	7e f4       	brtc	.+30     	; 0xaae <__addsf3x+0xa4>
 a90:	1f 16       	cp	r1, r31
 a92:	ba 0b       	sbc	r27, r26
 a94:	62 0b       	sbc	r22, r18
 a96:	73 0b       	sbc	r23, r19
 a98:	84 0b       	sbc	r24, r20
 a9a:	ba f0       	brmi	.+46     	; 0xaca <__addsf3x+0xc0>
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	a1 f0       	breq	.+40     	; 0xac8 <__addsf3x+0xbe>
 aa0:	ff 0f       	add	r31, r31
 aa2:	bb 1f       	adc	r27, r27
 aa4:	66 1f       	adc	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	c2 f7       	brpl	.-16     	; 0xa9c <__addsf3x+0x92>
 aac:	0e c0       	rjmp	.+28     	; 0xaca <__addsf3x+0xc0>
 aae:	ba 0f       	add	r27, r26
 ab0:	62 1f       	adc	r22, r18
 ab2:	73 1f       	adc	r23, r19
 ab4:	84 1f       	adc	r24, r20
 ab6:	48 f4       	brcc	.+18     	; 0xaca <__addsf3x+0xc0>
 ab8:	87 95       	ror	r24
 aba:	77 95       	ror	r23
 abc:	67 95       	ror	r22
 abe:	b7 95       	ror	r27
 ac0:	f7 95       	ror	r31
 ac2:	9e 3f       	cpi	r25, 0xFE	; 254
 ac4:	08 f0       	brcs	.+2      	; 0xac8 <__addsf3x+0xbe>
 ac6:	b0 cf       	rjmp	.-160    	; 0xa28 <__addsf3x+0x1e>
 ac8:	93 95       	inc	r25
 aca:	88 0f       	add	r24, r24
 acc:	08 f0       	brcs	.+2      	; 0xad0 <__addsf3x+0xc6>
 ace:	99 27       	eor	r25, r25
 ad0:	ee 0f       	add	r30, r30
 ad2:	97 95       	ror	r25
 ad4:	87 95       	ror	r24
 ad6:	08 95       	ret

Disassembly of section .text:

0000165e <__divsf3>:
    165e:	0e 94 2c 04 	call	0x858	; 0x858 <__divsf3x>
    1662:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

Disassembly of section .text:

00000858 <__divsf3x>:
 858:	10 c0       	rjmp	.+32     	; 0x87a <__divsf3x+0x22>
 85a:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_pscB>
 85e:	58 f0       	brcs	.+22     	; 0x876 <__divsf3x+0x1e>
 860:	0e 94 0e 0b 	call	0x161c	; 0x161c <__fp_pscA>
 864:	40 f0       	brcs	.+16     	; 0x876 <__divsf3x+0x1e>
 866:	29 f4       	brne	.+10     	; 0x872 <__divsf3x+0x1a>
 868:	5f 3f       	cpi	r21, 0xFF	; 255
 86a:	29 f0       	breq	.+10     	; 0x876 <__divsf3x+0x1e>
 86c:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_inf>
 870:	51 11       	cpse	r21, r1
 872:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
 876:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
 87a:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_split3>
 87e:	68 f3       	brcs	.-38     	; 0x85a <__divsf3x+0x2>

00000880 <__divsf3_pse>:
 880:	99 23       	and	r25, r25
 882:	b1 f3       	breq	.-20     	; 0x870 <__divsf3x+0x18>
 884:	55 23       	and	r21, r21
 886:	91 f3       	breq	.-28     	; 0x86c <__divsf3x+0x14>
 888:	95 1b       	sub	r25, r21
 88a:	55 0b       	sbc	r21, r21
 88c:	bb 27       	eor	r27, r27
 88e:	aa 27       	eor	r26, r26
 890:	62 17       	cp	r22, r18
 892:	73 07       	cpc	r23, r19
 894:	84 07       	cpc	r24, r20
 896:	38 f0       	brcs	.+14     	; 0x8a6 <__divsf3_pse+0x26>
 898:	9f 5f       	subi	r25, 0xFF	; 255
 89a:	5f 4f       	sbci	r21, 0xFF	; 255
 89c:	22 0f       	add	r18, r18
 89e:	33 1f       	adc	r19, r19
 8a0:	44 1f       	adc	r20, r20
 8a2:	aa 1f       	adc	r26, r26
 8a4:	a9 f3       	breq	.-22     	; 0x890 <__divsf3_pse+0x10>
 8a6:	35 d0       	rcall	.+106    	; 0x912 <__stack+0x13>
 8a8:	0e 2e       	mov	r0, r30
 8aa:	3a f0       	brmi	.+14     	; 0x8ba <__divsf3_pse+0x3a>
 8ac:	e0 e8       	ldi	r30, 0x80	; 128
 8ae:	32 d0       	rcall	.+100    	; 0x914 <__stack+0x15>
 8b0:	91 50       	subi	r25, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	e6 95       	lsr	r30
 8b6:	00 1c       	adc	r0, r0
 8b8:	ca f7       	brpl	.-14     	; 0x8ac <__divsf3_pse+0x2c>
 8ba:	2b d0       	rcall	.+86     	; 0x912 <__stack+0x13>
 8bc:	fe 2f       	mov	r31, r30
 8be:	29 d0       	rcall	.+82     	; 0x912 <__stack+0x13>
 8c0:	66 0f       	add	r22, r22
 8c2:	77 1f       	adc	r23, r23
 8c4:	88 1f       	adc	r24, r24
 8c6:	bb 1f       	adc	r27, r27
 8c8:	26 17       	cp	r18, r22
 8ca:	37 07       	cpc	r19, r23
 8cc:	48 07       	cpc	r20, r24
 8ce:	ab 07       	cpc	r26, r27
 8d0:	b0 e8       	ldi	r27, 0x80	; 128
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__divsf3_pse+0x56>
 8d4:	bb 0b       	sbc	r27, r27
 8d6:	80 2d       	mov	r24, r0
 8d8:	bf 01       	movw	r22, r30
 8da:	ff 27       	eor	r31, r31
 8dc:	93 58       	subi	r25, 0x83	; 131
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	3a f0       	brmi	.+14     	; 0x8f0 <__divsf3_pse+0x70>
 8e2:	9e 3f       	cpi	r25, 0xFE	; 254
 8e4:	51 05       	cpc	r21, r1
 8e6:	78 f0       	brcs	.+30     	; 0x906 <__stack+0x7>
 8e8:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_inf>
 8ec:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
 8f0:	5f 3f       	cpi	r21, 0xFF	; 255
 8f2:	e4 f3       	brlt	.-8      	; 0x8ec <__divsf3_pse+0x6c>
 8f4:	98 3e       	cpi	r25, 0xE8	; 232
 8f6:	d4 f3       	brlt	.-12     	; 0x8ec <__divsf3_pse+0x6c>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b7 95       	ror	r27
 900:	f7 95       	ror	r31
 902:	9f 5f       	subi	r25, 0xFF	; 255
 904:	c9 f7       	brne	.-14     	; 0x8f8 <__divsf3_pse+0x78>
 906:	88 0f       	add	r24, r24
 908:	91 1d       	adc	r25, r1
 90a:	96 95       	lsr	r25
 90c:	87 95       	ror	r24
 90e:	97 f9       	bld	r25, 7
 910:	08 95       	ret
 912:	e1 e0       	ldi	r30, 0x01	; 1
 914:	66 0f       	add	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	bb 1f       	adc	r27, r27
 91c:	62 17       	cp	r22, r18
 91e:	73 07       	cpc	r23, r19
 920:	84 07       	cpc	r24, r20
 922:	ba 07       	cpc	r27, r26
 924:	20 f0       	brcs	.+8      	; 0x92e <__stack+0x2f>
 926:	62 1b       	sub	r22, r18
 928:	73 0b       	sbc	r23, r19
 92a:	84 0b       	sbc	r24, r20
 92c:	ba 0b       	sbc	r27, r26
 92e:	ee 1f       	adc	r30, r30
 930:	88 f7       	brcc	.-30     	; 0x914 <__stack+0x15>
 932:	e0 95       	com	r30
 934:	08 95       	ret

Disassembly of section .text:

0000160e <__fixsfsi>:
    160e:	0e 94 5f 08 	call	0x10be	; 0x10be <__fixunssfsi>
    1612:	68 94       	set
    1614:	b1 11       	cpse	r27, r1
    1616:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
    161a:	08 95       	ret

Disassembly of section .text:

000010be <__fixunssfsi>:
    10be:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fp_splitA>
    10c2:	88 f0       	brcs	.+34     	; 0x10e6 <__fixunssfsi+0x28>
    10c4:	9f 57       	subi	r25, 0x7F	; 127
    10c6:	98 f0       	brcs	.+38     	; 0x10ee <__fixunssfsi+0x30>
    10c8:	b9 2f       	mov	r27, r25
    10ca:	99 27       	eor	r25, r25
    10cc:	b7 51       	subi	r27, 0x17	; 23
    10ce:	b0 f0       	brcs	.+44     	; 0x10fc <__fixunssfsi+0x3e>
    10d0:	e1 f0       	breq	.+56     	; 0x110a <__fixunssfsi+0x4c>
    10d2:	66 0f       	add	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	1a f0       	brmi	.+6      	; 0x10e2 <__fixunssfsi+0x24>
    10dc:	ba 95       	dec	r27
    10de:	c9 f7       	brne	.-14     	; 0x10d2 <__fixunssfsi+0x14>
    10e0:	14 c0       	rjmp	.+40     	; 0x110a <__fixunssfsi+0x4c>
    10e2:	b1 30       	cpi	r27, 0x01	; 1
    10e4:	91 f0       	breq	.+36     	; 0x110a <__fixunssfsi+0x4c>
    10e6:	0e 94 1c 0b 	call	0x1638	; 0x1638 <__fp_zero>
    10ea:	b1 e0       	ldi	r27, 0x01	; 1
    10ec:	08 95       	ret
    10ee:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_zero>
    10f2:	67 2f       	mov	r22, r23
    10f4:	78 2f       	mov	r23, r24
    10f6:	88 27       	eor	r24, r24
    10f8:	b8 5f       	subi	r27, 0xF8	; 248
    10fa:	39 f0       	breq	.+14     	; 0x110a <__fixunssfsi+0x4c>
    10fc:	b9 3f       	cpi	r27, 0xF9	; 249
    10fe:	cc f3       	brlt	.-14     	; 0x10f2 <__fixunssfsi+0x34>
    1100:	86 95       	lsr	r24
    1102:	77 95       	ror	r23
    1104:	67 95       	ror	r22
    1106:	b3 95       	inc	r27
    1108:	d9 f7       	brne	.-10     	; 0x1100 <__fixunssfsi+0x42>
    110a:	3e f4       	brtc	.+14     	; 0x111a <__fixunssfsi+0x5c>
    110c:	90 95       	com	r25
    110e:	80 95       	com	r24
    1110:	70 95       	com	r23
    1112:	61 95       	neg	r22
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	08 95       	ret

Disassembly of section .text:

00000d68 <__floatunsisf>:
 d68:	e8 94       	clt
 d6a:	09 c0       	rjmp	.+18     	; 0xd7e <__floatsisf+0x12>

00000d6c <__floatsisf>:
 d6c:	97 fb       	bst	r25, 7
 d6e:	3e f4       	brtc	.+14     	; 0xd7e <__floatsisf+0x12>
 d70:	90 95       	com	r25
 d72:	80 95       	com	r24
 d74:	70 95       	com	r23
 d76:	61 95       	neg	r22
 d78:	7f 4f       	sbci	r23, 0xFF	; 255
 d7a:	8f 4f       	sbci	r24, 0xFF	; 255
 d7c:	9f 4f       	sbci	r25, 0xFF	; 255
 d7e:	99 23       	and	r25, r25
 d80:	a9 f0       	breq	.+42     	; 0xdac <__floatsisf+0x40>
 d82:	f9 2f       	mov	r31, r25
 d84:	96 e9       	ldi	r25, 0x96	; 150
 d86:	bb 27       	eor	r27, r27
 d88:	93 95       	inc	r25
 d8a:	f6 95       	lsr	r31
 d8c:	87 95       	ror	r24
 d8e:	77 95       	ror	r23
 d90:	67 95       	ror	r22
 d92:	b7 95       	ror	r27
 d94:	f1 11       	cpse	r31, r1
 d96:	f8 cf       	rjmp	.-16     	; 0xd88 <__floatsisf+0x1c>
 d98:	fa f4       	brpl	.+62     	; 0xdd8 <__floatsisf+0x6c>
 d9a:	bb 0f       	add	r27, r27
 d9c:	11 f4       	brne	.+4      	; 0xda2 <__floatsisf+0x36>
 d9e:	60 ff       	sbrs	r22, 0
 da0:	1b c0       	rjmp	.+54     	; 0xdd8 <__floatsisf+0x6c>
 da2:	6f 5f       	subi	r22, 0xFF	; 255
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	16 c0       	rjmp	.+44     	; 0xdd8 <__floatsisf+0x6c>
 dac:	88 23       	and	r24, r24
 dae:	11 f0       	breq	.+4      	; 0xdb4 <__floatsisf+0x48>
 db0:	96 e9       	ldi	r25, 0x96	; 150
 db2:	11 c0       	rjmp	.+34     	; 0xdd6 <__floatsisf+0x6a>
 db4:	77 23       	and	r23, r23
 db6:	21 f0       	breq	.+8      	; 0xdc0 <__floatsisf+0x54>
 db8:	9e e8       	ldi	r25, 0x8E	; 142
 dba:	87 2f       	mov	r24, r23
 dbc:	76 2f       	mov	r23, r22
 dbe:	05 c0       	rjmp	.+10     	; 0xdca <__floatsisf+0x5e>
 dc0:	66 23       	and	r22, r22
 dc2:	71 f0       	breq	.+28     	; 0xde0 <__floatsisf+0x74>
 dc4:	96 e8       	ldi	r25, 0x86	; 134
 dc6:	86 2f       	mov	r24, r22
 dc8:	70 e0       	ldi	r23, 0x00	; 0
 dca:	60 e0       	ldi	r22, 0x00	; 0
 dcc:	2a f0       	brmi	.+10     	; 0xdd8 <__floatsisf+0x6c>
 dce:	9a 95       	dec	r25
 dd0:	66 0f       	add	r22, r22
 dd2:	77 1f       	adc	r23, r23
 dd4:	88 1f       	adc	r24, r24
 dd6:	da f7       	brpl	.-10     	; 0xdce <__floatsisf+0x62>
 dd8:	88 0f       	add	r24, r24
 dda:	96 95       	lsr	r25
 ddc:	87 95       	ror	r24
 dde:	97 f9       	bld	r25, 7
 de0:	08 95       	ret

Disassembly of section .text:

00001646 <__fp_inf>:
    1646:	97 f9       	bld	r25, 7
    1648:	9f 67       	ori	r25, 0x7F	; 127
    164a:	80 e8       	ldi	r24, 0x80	; 128
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	08 95       	ret

Disassembly of section .text:

00001674 <__fp_nan>:
    1674:	9f ef       	ldi	r25, 0xFF	; 255
    1676:	80 ec       	ldi	r24, 0xC0	; 192
    1678:	08 95       	ret

Disassembly of section .text:

0000161c <__fp_pscA>:
    161c:	00 24       	eor	r0, r0
    161e:	0a 94       	dec	r0
    1620:	16 16       	cp	r1, r22
    1622:	17 06       	cpc	r1, r23
    1624:	18 06       	cpc	r1, r24
    1626:	09 06       	cpc	r0, r25
    1628:	08 95       	ret

Disassembly of section .text:

0000162a <__fp_pscB>:
    162a:	00 24       	eor	r0, r0
    162c:	0a 94       	dec	r0
    162e:	12 16       	cp	r1, r18
    1630:	13 06       	cpc	r1, r19
    1632:	14 06       	cpc	r1, r20
    1634:	05 06       	cpc	r0, r21
    1636:	08 95       	ret

Disassembly of section .text:

000014fa <__fp_round>:
    14fa:	09 2e       	mov	r0, r25
    14fc:	03 94       	inc	r0
    14fe:	00 0c       	add	r0, r0
    1500:	11 f4       	brne	.+4      	; 0x1506 <__fp_round+0xc>
    1502:	88 23       	and	r24, r24
    1504:	52 f0       	brmi	.+20     	; 0x151a <__fp_round+0x20>
    1506:	bb 0f       	add	r27, r27
    1508:	40 f4       	brcc	.+16     	; 0x151a <__fp_round+0x20>
    150a:	bf 2b       	or	r27, r31
    150c:	11 f4       	brne	.+4      	; 0x1512 <__fp_round+0x18>
    150e:	60 ff       	sbrs	r22, 0
    1510:	04 c0       	rjmp	.+8      	; 0x151a <__fp_round+0x20>
    1512:	6f 5f       	subi	r22, 0xFF	; 255
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	8f 4f       	sbci	r24, 0xFF	; 255
    1518:	9f 4f       	sbci	r25, 0xFF	; 255
    151a:	08 95       	ret

Disassembly of section .text:

00001204 <__fp_split3>:
    1204:	57 fd       	sbrc	r21, 7
    1206:	90 58       	subi	r25, 0x80	; 128
    1208:	44 0f       	add	r20, r20
    120a:	55 1f       	adc	r21, r21
    120c:	59 f0       	breq	.+22     	; 0x1224 <__fp_splitA+0x10>
    120e:	5f 3f       	cpi	r21, 0xFF	; 255
    1210:	71 f0       	breq	.+28     	; 0x122e <__fp_splitA+0x1a>
    1212:	47 95       	ror	r20

00001214 <__fp_splitA>:
    1214:	88 0f       	add	r24, r24
    1216:	97 fb       	bst	r25, 7
    1218:	99 1f       	adc	r25, r25
    121a:	61 f0       	breq	.+24     	; 0x1234 <__fp_splitA+0x20>
    121c:	9f 3f       	cpi	r25, 0xFF	; 255
    121e:	79 f0       	breq	.+30     	; 0x123e <__fp_splitA+0x2a>
    1220:	87 95       	ror	r24
    1222:	08 95       	ret
    1224:	12 16       	cp	r1, r18
    1226:	13 06       	cpc	r1, r19
    1228:	14 06       	cpc	r1, r20
    122a:	55 1f       	adc	r21, r21
    122c:	f2 cf       	rjmp	.-28     	; 0x1212 <__fp_split3+0xe>
    122e:	46 95       	lsr	r20
    1230:	f1 df       	rcall	.-30     	; 0x1214 <__fp_splitA>
    1232:	08 c0       	rjmp	.+16     	; 0x1244 <__fp_splitA+0x30>
    1234:	16 16       	cp	r1, r22
    1236:	17 06       	cpc	r1, r23
    1238:	18 06       	cpc	r1, r24
    123a:	99 1f       	adc	r25, r25
    123c:	f1 cf       	rjmp	.-30     	; 0x1220 <__fp_splitA+0xc>
    123e:	86 95       	lsr	r24
    1240:	71 05       	cpc	r23, r1
    1242:	61 05       	cpc	r22, r1
    1244:	08 94       	sec
    1246:	08 95       	ret

Disassembly of section .text:

00001638 <__fp_zero>:
    1638:	e8 94       	clt

0000163a <__fp_szero>:
    163a:	bb 27       	eor	r27, r27
    163c:	66 27       	eor	r22, r22
    163e:	77 27       	eor	r23, r23
    1640:	cb 01       	movw	r24, r22
    1642:	97 f9       	bld	r25, 7
    1644:	08 95       	ret

Disassembly of section .text:

00001666 <__mulsf3>:
    1666:	0e 94 9b 04 	call	0x936	; 0x936 <__mulsf3x>
    166a:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__fp_round>

Disassembly of section .text:

00000936 <__mulsf3x>:
 936:	0f c0       	rjmp	.+30     	; 0x956 <__mulsf3x+0x20>
 938:	0e 94 0e 0b 	call	0x161c	; 0x161c <__fp_pscA>
 93c:	38 f0       	brcs	.+14     	; 0x94c <__mulsf3x+0x16>
 93e:	0e 94 15 0b 	call	0x162a	; 0x162a <__fp_pscB>
 942:	20 f0       	brcs	.+8      	; 0x94c <__mulsf3x+0x16>
 944:	95 23       	and	r25, r21
 946:	11 f0       	breq	.+4      	; 0x94c <__mulsf3x+0x16>
 948:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_inf>
 94c:	0c 94 3a 0b 	jmp	0x1674	; 0x1674 <__fp_nan>
 950:	11 24       	eor	r1, r1
 952:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
 956:	0e 94 02 09 	call	0x1204	; 0x1204 <__fp_split3>
 95a:	70 f3       	brcs	.-36     	; 0x938 <__mulsf3x+0x2>

0000095c <__mulsf3_pse>:
 95c:	95 9f       	mul	r25, r21
 95e:	c1 f3       	breq	.-16     	; 0x950 <__mulsf3x+0x1a>
 960:	95 0f       	add	r25, r21
 962:	50 e0       	ldi	r21, 0x00	; 0
 964:	55 1f       	adc	r21, r21
 966:	62 9f       	mul	r22, r18
 968:	f0 01       	movw	r30, r0
 96a:	72 9f       	mul	r23, r18
 96c:	bb 27       	eor	r27, r27
 96e:	f0 0d       	add	r31, r0
 970:	b1 1d       	adc	r27, r1
 972:	63 9f       	mul	r22, r19
 974:	aa 27       	eor	r26, r26
 976:	f0 0d       	add	r31, r0
 978:	b1 1d       	adc	r27, r1
 97a:	aa 1f       	adc	r26, r26
 97c:	64 9f       	mul	r22, r20
 97e:	66 27       	eor	r22, r22
 980:	b0 0d       	add	r27, r0
 982:	a1 1d       	adc	r26, r1
 984:	66 1f       	adc	r22, r22
 986:	82 9f       	mul	r24, r18
 988:	22 27       	eor	r18, r18
 98a:	b0 0d       	add	r27, r0
 98c:	a1 1d       	adc	r26, r1
 98e:	62 1f       	adc	r22, r18
 990:	73 9f       	mul	r23, r19
 992:	b0 0d       	add	r27, r0
 994:	a1 1d       	adc	r26, r1
 996:	62 1f       	adc	r22, r18
 998:	83 9f       	mul	r24, r19
 99a:	a0 0d       	add	r26, r0
 99c:	61 1d       	adc	r22, r1
 99e:	22 1f       	adc	r18, r18
 9a0:	74 9f       	mul	r23, r20
 9a2:	33 27       	eor	r19, r19
 9a4:	a0 0d       	add	r26, r0
 9a6:	61 1d       	adc	r22, r1
 9a8:	23 1f       	adc	r18, r19
 9aa:	84 9f       	mul	r24, r20
 9ac:	60 0d       	add	r22, r0
 9ae:	21 1d       	adc	r18, r1
 9b0:	82 2f       	mov	r24, r18
 9b2:	76 2f       	mov	r23, r22
 9b4:	6a 2f       	mov	r22, r26
 9b6:	11 24       	eor	r1, r1
 9b8:	9f 57       	subi	r25, 0x7F	; 127
 9ba:	50 40       	sbci	r21, 0x00	; 0
 9bc:	9a f0       	brmi	.+38     	; 0x9e4 <__mulsf3_pse+0x88>
 9be:	f1 f0       	breq	.+60     	; 0x9fc <__mulsf3_pse+0xa0>
 9c0:	88 23       	and	r24, r24
 9c2:	4a f0       	brmi	.+18     	; 0x9d6 <__mulsf3_pse+0x7a>
 9c4:	ee 0f       	add	r30, r30
 9c6:	ff 1f       	adc	r31, r31
 9c8:	bb 1f       	adc	r27, r27
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	91 50       	subi	r25, 0x01	; 1
 9d2:	50 40       	sbci	r21, 0x00	; 0
 9d4:	a9 f7       	brne	.-22     	; 0x9c0 <__mulsf3_pse+0x64>
 9d6:	9e 3f       	cpi	r25, 0xFE	; 254
 9d8:	51 05       	cpc	r21, r1
 9da:	80 f0       	brcs	.+32     	; 0x9fc <__mulsf3_pse+0xa0>
 9dc:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <__fp_inf>
 9e0:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__fp_szero>
 9e4:	5f 3f       	cpi	r21, 0xFF	; 255
 9e6:	e4 f3       	brlt	.-8      	; 0x9e0 <__mulsf3_pse+0x84>
 9e8:	98 3e       	cpi	r25, 0xE8	; 232
 9ea:	d4 f3       	brlt	.-12     	; 0x9e0 <__mulsf3_pse+0x84>
 9ec:	86 95       	lsr	r24
 9ee:	77 95       	ror	r23
 9f0:	67 95       	ror	r22
 9f2:	b7 95       	ror	r27
 9f4:	f7 95       	ror	r31
 9f6:	e7 95       	ror	r30
 9f8:	9f 5f       	subi	r25, 0xFF	; 255
 9fa:	c1 f7       	brne	.-16     	; 0x9ec <__mulsf3_pse+0x90>
 9fc:	fe 2b       	or	r31, r30
 9fe:	88 0f       	add	r24, r24
 a00:	91 1d       	adc	r25, r1
 a02:	96 95       	lsr	r25
 a04:	87 95       	ror	r24
 a06:	97 f9       	bld	r25, 7
 a08:	08 95       	ret

Disassembly of section .text.libgcc.div:

00001440 <__divmodhi4>:
    1440:	97 fb       	bst	r25, 7
    1442:	07 2e       	mov	r0, r23
    1444:	16 f4       	brtc	.+4      	; 0x144a <__divmodhi4+0xa>
    1446:	00 94       	com	r0
    1448:	07 d0       	rcall	.+14     	; 0x1458 <__divmodhi4_neg1>
    144a:	77 fd       	sbrc	r23, 7
    144c:	09 d0       	rcall	.+18     	; 0x1460 <__divmodhi4_neg2>
    144e:	0e 94 34 0a 	call	0x1468	; 0x1468 <__udivmodhi4>
    1452:	07 fc       	sbrc	r0, 7
    1454:	05 d0       	rcall	.+10     	; 0x1460 <__divmodhi4_neg2>
    1456:	3e f4       	brtc	.+14     	; 0x1466 <__divmodhi4_exit>

00001458 <__divmodhi4_neg1>:
    1458:	90 95       	com	r25
    145a:	81 95       	neg	r24
    145c:	9f 4f       	sbci	r25, 0xFF	; 255
    145e:	08 95       	ret

00001460 <__divmodhi4_neg2>:
    1460:	70 95       	com	r23
    1462:	61 95       	neg	r22
    1464:	7f 4f       	sbci	r23, 0xFF	; 255

00001466 <__divmodhi4_exit>:
    1466:	08 95       	ret

Disassembly of section .text.libgcc:

00001652 <__tablejump2__>:
    1652:	ee 0f       	add	r30, r30
    1654:	ff 1f       	adc	r31, r31
    1656:	05 90       	lpm	r0, Z+
    1658:	f4 91       	lpm	r31, Z
    165a:	e0 2d       	mov	r30, r0
    165c:	09 94       	ijmp

Disassembly of section .text.libgcc.div:

00001468 <__udivmodhi4>:
    1468:	aa 1b       	sub	r26, r26
    146a:	bb 1b       	sub	r27, r27
    146c:	51 e1       	ldi	r21, 0x11	; 17
    146e:	07 c0       	rjmp	.+14     	; 0x147e <__udivmodhi4_ep>

00001470 <__udivmodhi4_loop>:
    1470:	aa 1f       	adc	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	a6 17       	cp	r26, r22
    1476:	b7 07       	cpc	r27, r23
    1478:	10 f0       	brcs	.+4      	; 0x147e <__udivmodhi4_ep>
    147a:	a6 1b       	sub	r26, r22
    147c:	b7 0b       	sbc	r27, r23

0000147e <__udivmodhi4_ep>:
    147e:	88 1f       	adc	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	5a 95       	dec	r21
    1484:	a9 f7       	brne	.-22     	; 0x1470 <__udivmodhi4_loop>
    1486:	80 95       	com	r24
    1488:	90 95       	com	r25
    148a:	bc 01       	movw	r22, r24
    148c:	cd 01       	movw	r24, r26
    148e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001682 <_fini>:
    1682:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001684 <__funcs_on_exit>:
    1684:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001686 <__simulator_exit>:
    1686:	08 95       	ret

Disassembly of section .text.exit:

000015ae <exit>:
    15ae:	ec 01       	movw	r28, r24
    15b0:	0e 94 42 0b 	call	0x1684	; 0x1684 <__funcs_on_exit>
    15b4:	0e 94 41 0b 	call	0x1682	; 0x1682 <_fini>
    15b8:	ce 01       	movw	r24, r28
    15ba:	0e 94 43 0b 	call	0x1686	; 0x1686 <__simulator_exit>
    15be:	ce 01       	movw	r24, r28
    15c0:	0e 94 3f 0b 	call	0x167e	; 0x167e <_Exit>

Disassembly of section .text._Exit:

0000167e <_Exit>:
    167e:	0e 94 a6 00 	call	0x14c	; 0x14c <_exit>
